<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>本该如此轻松</title>
    <url>/2021/05/09/%E6%9C%AC%E8%AF%A5%E5%A6%82%E6%AD%A4%E8%BD%BB%E6%9D%BE/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="本该如此轻松"><a href="#本该如此轻松" class="headerlink" title="本该如此轻松"></a>本该如此轻松</h2><p>我们立志让计算机和金融商科专业背景的同学能够在所有的课程中获得高GPA</p>
<h3 id="RESPONSIVE"><a href="#RESPONSIVE" class="headerlink" title="RESPONSIVE"></a>RESPONSIVE</h3><p>7*24小时不间断服务，平均回复时长不超过1分钟，高效沟通，只为解决你的疑惑</p>
<h3 id="QUALITY"><a href="#QUALITY" class="headerlink" title="QUALITY"></a>QUALITY</h3><p>作业质量经过层层把关，杜绝抄袭、重复赘述等问题，详细注释，思路解析，一点就通</p>
<h3 id="SUPPORT"><a href="#SUPPORT" class="headerlink" title="SUPPORT"></a>SUPPORT</h3><p>7天售后，作业有问题全额退款，精英导师手把手答疑解惑</p>
<p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
  </entry>
  <entry>
    <title>基于SpringBoot的旅游景区项目</title>
    <url>/2022/05/21/Java%E6%99%AF%E5%8C%BA%E6%97%85%E6%B8%B8%E9%A1%B9%E7%9B%AE%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的旅游景区项目.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>支付宝沙盒支付<br>百度地图JS</p>
<p>民宿管理员：订单数量统计，订单交易额统计，客房统计饼图，酒店信息修改，房间订单查询，房间入住状态修改，查看住宿订单详情，酒店房间管理，查看用户房间订单评价</p>
<p>超级管理员：景点民宿导航，公告管理，订单评价，民宿管理，民宿订单，论坛管理，消息回复，房间信息，景点管理，用户管理，景区订单</p>
<p>用户：邮箱注册，修改个人信息，订单支付，我的贴子，订单评价，发帖回复，修改密码</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[民宿管理员]<br>xierdun<br>1234qwer</p>
<p>[用户]<br>test<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://imgtu.com/i/OIVagf"><img src="https://s1.ax1x.com/2022/05/17/OIVagf.png" alt="OIVagf.png"></a></td>
<td><a href="https://imgtu.com/i/OIVBDg"><img src="https://s1.ax1x.com/2022/05/17/OIVBDg.png" alt="OIVBDg.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVDbQ"><img src="https://s1.ax1x.com/2022/05/17/OIVDbQ.png" alt="OIVDbQ.png"></a></td>
<td><a href="https://imgtu.com/i/OIV0KS"><img src="https://s1.ax1x.com/2022/05/17/OIV0KS.png" alt="OIV0KS.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVdv8"><img src="https://s1.ax1x.com/2022/05/17/OIVdv8.png" alt="OIVdv8.png"></a></td>
<td><a href="https://imgtu.com/i/OIVgCq"><img src="https://s1.ax1x.com/2022/05/17/OIVgCq.png" alt="OIVgCq.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIV5b4"><img src="https://s1.ax1x.com/2022/05/17/OIV5b4.png" alt="OIV5b4.png"></a></td>
<td><a href="https://imgtu.com/i/OIVsEj"><img src="https://s1.ax1x.com/2022/05/17/OIVsEj.png" alt="OIVsEj.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVyUs"><img src="https://s1.ax1x.com/2022/05/17/OIVyUs.png" alt="OIVyUs.png"></a></td>
<td><a href="https://imgtu.com/i/OIV65n"><img src="https://s1.ax1x.com/2022/05/17/OIV65n.png" alt="OIV65n.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIV280"><img src="https://s1.ax1x.com/2022/05/17/OIV280.png" alt="OIV280.png"></a></td>
<td><a href="https://imgtu.com/i/OIVhKU"><img src="https://s1.ax1x.com/2022/05/17/OIVhKU.png" alt="OIVhKU.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVR2V"><img src="https://s1.ax1x.com/2022/05/17/OIVR2V.png" alt="OIVR2V.png"></a></td>
<td><a href="https://imgtu.com/i/OIV4rF"><img src="https://s1.ax1x.com/2022/05/17/OIV4rF.png" alt="OIV4rF.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIuelq"><img src="https://s1.ax1x.com/2022/05/17/OIuelq.png" alt="OIuelq.png"></a></td>
<td><a href="https://imgtu.com/i/OIum60"><img src="https://s1.ax1x.com/2022/05/17/OIum60.png" alt="OIum60.png"></a></td>
</tr>
</tbody></table>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1S94y1f7Dg/">项目视频：基于Spring的旅游住宿小程序</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#97;&#110;&#49;&#107;&#101;&#50;&#107;&#101;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#102;&#97;&#110;&#49;&#107;&#101;&#50;&#107;&#101;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Stream完全使用指南</title>
    <url>/2022/05/21/Java8%20Stream%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h2><p>Stream是Java 1.8版本开始提供的一个接口，主要提供对数据集合使用流的方式进行操作，流中的元素不可变且只会被消费一次，所有方法都设计成支持链式调用。使用Stream API可以极大生产力，写出高效率、干净、简洁的代码。</p>
<h2 id="如何获得Stream实例"><a href="#如何获得Stream实例" class="headerlink" title="如何获得Stream实例"></a>如何获得Stream实例</h2><p>Stream提供了静态构建方法，可以基于不同的参数创建返回Stream实例<br>使用Collection的子类实例调用stream()或者parallelStream()方法也可以得到Stream实例，两个方法的区别在于后续执行Stream其他方法的时候是单线程还是多线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//无限长的偶数流</span></span><br><span class="line">Stream&lt;Integer&gt; evenNumStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; strStream = strList.stream();</span><br><span class="line">Stream&lt;String&gt; strParallelStream = strList.parallelStream();</span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter方法用于根据指定的条件做过滤，返回符合条件的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//获得只包含正数的流，positiveNumStream -&gt; (1，2，3)</span></span><br><span class="line">Stream&lt;Integer&gt; positiveNumStream = numStream.filter(num -&gt; num &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map方法用于将流中的每个元素执行指定的转换逻辑，返回其他类型元素的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//转换成字符串流</span></span><br><span class="line">Stream&lt;String&gt; strStream = numStream.map(String::valueOf);</span><br></pre></td></tr></table></figure>

<h2 id="mapToInt-mapToLong-mapToDouble"><a href="#mapToInt-mapToLong-mapToDouble" class="headerlink" title="mapToInt mapToLong mapToDouble"></a>mapToInt mapToLong mapToDouble</h2><p>这三个方法是对map方法的封装，返回的是官方为各个类型单独定义的Stream，该Stream还提供了适合各自类型的其他操作方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">IntStream intStream = stringStream.mapToInt(Integer::parseInt);</span><br><span class="line">LongStream longStream = stringStream.mapToLong(Long::parseLong);</span><br><span class="line">DoubleStream doubleStream = stringStream.mapToDouble(Double::parseDouble);</span><br></pre></td></tr></table></figure>

<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>flatMap方法用于将流中的每个元素转换成其他类型元素的流，比如，当前有一个订单(Order)列表，每个订单又包含多个商品(itemList)，如果要得到所有订单的所有商品汇总，就可以使用该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Item&gt; allItemStream = orderList.stream().flatMap(order -&gt; order.itemList.stream());</span><br></pre></td></tr></table></figure>

<h2 id="flatMapToInt-flatMapToLong-flatMapToDouble"><a href="#flatMapToInt-flatMapToLong-flatMapToDouble" class="headerlink" title="flatMapToInt flatMapToLong flatMapToDouble"></a>flatMapToInt flatMapToLong flatMapToDouble</h2><p>这三个方法是对flatMap方法的封装，返回的是官方为各个类型单独定义的Stream，使用方法同上</p>
<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>distinct方法用于对流中的元素去重，判断元素是否重复使用的是equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//不重复的数字流，uniqueNumStream -&gt; (-2, -1, 0, 1, 2, 3)</span></span><br><span class="line">Stream&lt;Integer&gt; uniqueNumStream = numStream.distinct();</span><br></pre></td></tr></table></figure>

<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><p>sorted有一个无参和一个有参的方法，用于对流中的元素进行排序。无参方法要求流中的元素必须实现Comparable接口，不然会报java.lang.ClassCastException异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; unorderedStream = Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//按从小到大排序完成的流，orderedStream -&gt; (4, 5, 6, 7, 27, 32)</span></span><br><span class="line">Stream&lt;Integer&gt; orderedStream = unorderedStream.sorted();</span><br></pre></td></tr></table></figure>

<p>有参方法sorted(Comparator&lt;? super T&gt; comparator)不需要元素实现Comparable接口，通过指定的元素比较器对流内的元素进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; unorderedStream = Stream.of(<span class="string">&quot;1234&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;12345&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//按字符串长度从小到大排序完成的流，orderedStream -&gt; (&quot;1&quot;, &quot;12&quot;, &quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;123456&quot;)</span></span><br><span class="line">Stream&lt;String&gt; orderedStream = unorderedStream.sorted(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>

<h2 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h2><p>peek方法可以不调整元素顺序和数量的情况下消费每一个元素，然后产生新的流，按文档上的说明，主要是用于对流执行的中间过程做debug的时候使用，因为Stream使用的时候一般都是链式调用的，所以可能会执行多次流操作，如果想看每个元素在多次流操作中间的流转情况，就可以使用这个方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">     .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">     .peek(e -&gt; System.out.println(<span class="string">&quot;Filtered value: &quot;</span> + e))</span><br><span class="line">     .map(String::toUpperCase)</span><br><span class="line">     .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">     .collect(Collectors.toList());</span><br><span class="line">     </span><br><span class="line">输出：</span><br><span class="line">Filtered value: three</span><br><span class="line">Mapped value: THREE</span><br><span class="line">Filtered value: four</span><br><span class="line">Mapped value: FOUR</span><br></pre></td></tr></table></figure>

<h2 id="limit-long-maxSize"><a href="#limit-long-maxSize" class="headerlink" title="limit(long maxSize)"></a>limit(long maxSize)</h2><p>limit方法会对流进行顺序截取，从第1个元素开始，保留最多maxSize个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//截取前3个元素，subStringStream -&gt; (&quot;-2&quot;, &quot;-1&quot;, &quot;0&quot;)</span></span><br><span class="line">Stream&lt;String&gt; subStringStream = stringStream.limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="skip-long-n"><a href="#skip-long-n" class="headerlink" title="skip(long n)"></a>skip(long n)</h2><p>skip方法用于跳过前n个元素，如果流中的元素数量不足n，则返回一个空的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//跳过前3个元素，subStringStream -&gt; (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span></span><br><span class="line">Stream&lt;String&gt; subStringStream = stringStream.skip(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>forEach方法的作用跟普通的for循环类似，不过这个可以支持多线程遍历，但是不保证遍历的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//单线程遍历输出元素</span></span><br><span class="line">stringStream.forEach(System.out::println);</span><br><span class="line"><span class="comment">//多线程遍历输出元素</span></span><br><span class="line">stringStream.parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="forEachOrdered"><a href="#forEachOrdered" class="headerlink" title="forEachOrdered"></a>forEachOrdered</h2><p>forEachOrdered方法可以保证顺序遍历，比如这个流是从外部传进来的，然后在这之前调用过parallel方法开启了多线程执行，就可以使用这个方法保证单线程顺序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//顺序遍历输出元素</span></span><br><span class="line">stringStream.forEachOrdered(System.out::println);</span><br><span class="line"><span class="comment">//多线程遍历输出元素，下面这行跟上面的执行结果是一样的</span></span><br><span class="line"><span class="comment">//stringStream.parallel().forEachOrdered(System.out::println);</span></span><br></pre></td></tr></table></figure>

<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h2><p>toArray有一个无参和一个有参的方法，无参方法用于把流中的元素转换成Object数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">Object[] objArray = stringStream.toArray();</span><br></pre></td></tr></table></figure>

<p>有参方法toArray(IntFunction&lt;A[]&gt; generator)支持把流中的元素转换成指定类型的元素数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">String[] strArray = stringStream.toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce有三个重载方法，作用是对流内元素做累进操作</p>
<p>第一个reduce(BinaryOperator<T> accumulator)</p>
<p>accumulator 为累进操作的具体计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//查找最小值</span></span><br><span class="line">Optional&lt;Integer&gt; min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class="line"><span class="comment">//输出 -2</span></span><br><span class="line">System.out.println(min.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤出大于5的元素流</span></span><br><span class="line">numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).filter(num -&gt; num &gt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">//查找最小值</span></span><br><span class="line">min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class="line"><span class="comment">//输出 Optional.empty</span></span><br><span class="line">System.out.println(min);</span><br></pre></td></tr></table></figure>

<p>第二个reduce(T identity, BinaryOperator<T> accumulator)</p>
<p>identity 为累进操作的初始值<br>accumulator 同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//累加计算所有元素的和，sum=3</span></span><br><span class="line"><span class="keyword">int</span> sum = numStream.reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure>

<h2 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h2><p>主要作用是把流中的元素作为集合转换成其他Collection的子类，其内部实现类似于前面的累进操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; numList = numStream.collect(Collectors.toList());</span><br><span class="line">Set&lt;Integer&gt; numSet = numStream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>

<h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p>min方法用于计算流内元素的最小值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Optional&lt;Integer&gt; min = numStream.min(Integer::compareTo);</span><br></pre></td></tr></table></figure>

<h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p>min方法用于计算流内元素的最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Optional&lt;Integer&gt; max = numStream.max(Integer::compareTo);</span><br></pre></td></tr></table></figure>

<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>count方法用于统计流内元素的总个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//count=6</span></span><br><span class="line"><span class="keyword">long</span> count = numStream.count();</span><br></pre></td></tr></table></figure>

<h2 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h2><p>anyMatch方法用于匹配校验流内元素是否有符合指定条件的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//判断是否包含正数，hasPositiveNum=true</span></span><br><span class="line"><span class="keyword">boolean</span> hasPositiveNum = numStream.anyMatch(num -&gt; num &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h2><p>noneMatch方法用于匹配校验流内元素是否都不符合指定条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//判断是否没有小于0的元素，noNegativeNum=false</span></span><br><span class="line"><span class="keyword">boolean</span> noNegativeNum = numStream.noneMatch(num -&gt; num &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h2><p>findFirst方法用于获取第一个元素，如果流是空的，则返回Optional.empty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//获取第一个元素，firstNum=-2</span></span><br><span class="line">Optional&lt;Integer&gt; firstNum = numStream.findFirst();</span><br></pre></td></tr></table></figure>

<h2 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h2><p>findAny方法用于获取流中的任意一个元素，如果流是空的，则返回Optional.empty，因为可能会使用多线程，所以不保证每次返回的是同一个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Optional&lt;Integer&gt; anyNum = numStream.findAny();</span><br></pre></td></tr></table></figure>

<h2 id="多属性过滤"><a href="#多属性过滤" class="headerlink" title="多属性过滤"></a>多属性过滤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SupplierEvaluationYear&gt; filter = supEvaluationYearList.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .filter(e -&gt; !(supplierEvaluationYears.stream()</span><br><span class="line">                .map(y -&gt; y.getSupplierId() + <span class="string">&quot;:&quot;</span> + y.getPurchaseId() + <span class="string">&quot;:&quot;</span> + y.getProductType() + <span class="string">&quot;:&quot;</span> + y.getYear())</span><br><span class="line">                .collect(toList())</span><br><span class="line">                .contains(e.getSupplierId() + <span class="string">&quot;:&quot;</span> + e.getPurchaseId() + <span class="string">&quot;:&quot;</span> + e.getProductType() + <span class="string">&quot;:&quot;</span> + e.getYear())))</span><br><span class="line">        .collect(toList());</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://segmentfault.com/a/1190000022791696">MartinDai</a></p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot学习论坛系统</title>
    <url>/2022/05/22/Java%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot学习论坛系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>（1）用户的注册登录</p>
<p>（2）帖子的发布与评论</p>
<p>（3）前台不同学科帖子的分类与展示</p>
<p>（4）搜索功能，对于想要搜索的学科与具体帖子进行搜索</p>
<p>（5）基于用户喜欢的帖子的类型进行相关学科类别的帖子进行内容推荐</p>
<p>（6）用户对于自己帖子的管理</p>
<p>（7）用户对于自己喜欢的帖子点赞及收藏</p>
<p>（8）对敏感词汇的屏蔽处理</p>
<p>（9）管理员对用户帖子以及评论的管理</p>
<p>（10）管理员对于帖子的板块分类管理</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[用户]<br>test<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1RB4y1174A/">项目视频：基于Spring学习论坛系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#110;&#49;&#107;&#101;&#x32;&#x6b;&#x65;&#x40;&#103;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#102;&#x61;&#110;&#49;&#107;&#101;&#x32;&#x6b;&#x65;&#x40;&#103;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的学生选课系统</title>
    <url>/2022/05/22/Java%E5%AD%A6%E7%94%9F%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的学生选课系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>教员，学生账号注册；管理员，教员，学生账号登陆，系统公告管理，系统动态管理，系统数据统计（学生统计，教员统计，课程统计， 缺席统计）</p>
<p>学生专业分布状况统计图，访问记录统计图，课程预约人数统计图，参加课程学生情况，学生选课信息，教员代课信息</p>
<p>管理员：课程管理，学生管理，教员管理，选课管理，系统用户管理，系统公告管理，系统动态管理，系统账户封禁</p>
<p>教员：教员信息管理，查看学生列表信息，教学任务管理，选课或停课，查看当前课程学生情况</p>
<p>学生：个人信息修改，课程预约，学生课程管理</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[教员]<br>test1<br>1234qwer</p>
<p>[学生]<br>fkkk<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1ui4y1Q7oS/">项目视频：基于Spring的学生选课系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#110;&#49;&#107;&#101;&#50;&#x6b;&#101;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#102;&#x61;&#110;&#49;&#107;&#101;&#50;&#x6b;&#101;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的实验室耗材管理系统</title>
    <url>/2022/05/22/Java%E5%AE%9E%E9%AA%8C%E5%AE%A4%E8%80%97%E6%9D%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的实验室耗材管理系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>学生管理，套餐管理，申请记录，库房管理，入库记录，出库记录，采购计划，报表统计，耗材类别，出入库物品明细</p>
<p>学生制定申请耗材-&gt;管理员审批制定采购计划-&gt;采购员采购-&gt;入库-&gt;出库</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[采购员]<br>caigou<br>1234qwer</p>
<p>[学生]<br>lisi<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1y94y1f783/">项目视频：基于Spring的实验室耗材管理系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#x66;&#x61;&#x6e;&#x31;&#107;&#101;&#50;&#107;&#x65;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x66;&#x61;&#x6e;&#x31;&#107;&#101;&#50;&#107;&#x65;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的小区物业管理系统</title>
    <url>/2022/05/22/Java%E5%B0%8F%E5%8C%BA%E7%89%A9%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的小区物业管理系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>1、实现小区信息管理（包括业主信息，楼宇信息，房间信息的管理，业主数量统计，房间数量统计（包括无人居住房与居住））；<br>2、实现物业费用缴纳管理（水电煤气清洁电梯停车位物业管理等费用数据管理，能够生成物业缴费的信息报表，缴费记录管理）；<br>3、物业项管理（包括水，电，煤气，清洁，消防，停车位等信息的管理）；<br>4、物业抄表入库管理（包括根据不同物业项以及业主的统计生成物业报表并将报表入库）；<br>5、业主日常管理（包括业主投诉，维修上报，业主评论及建议）；<br>6、物业抄表入库管理（包括根据不同物业项以及业主的统计生成物业报表并将报表入库）；<br>7、防疫登记管理（包括体温，健康码情况，进入时间以及地点）；<br>8、工作人员管理（包括管理员信息，管理人员权限，物业工作人员信息）；<br>9、公告管理（管理人员对相关的物业信息给予公告，包括停电停水暖气等相关信息）。</p>
<p>还有就是人脸识别  百度人工智能云的sdk<br>以及一个梯度上升算法，<br>支付的话用支付宝的沙箱，</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[业主]<br>fank<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1yu411v7oZ/">项目视频：基于Spring的小区物业管理系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#x66;&#97;&#110;&#x31;&#x6b;&#101;&#x32;&#107;&#101;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x66;&#97;&#110;&#x31;&#x6b;&#101;&#x32;&#107;&#101;&#64;&#103;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的旅游住宿小程序</title>
    <url>/2022/05/22/Java%E6%97%85%E6%B8%B8%E4%BD%8F%E5%AE%BF%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>基于SpringBoot的旅游住宿小程序.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>百度地图JS<br>微信小程序</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>实现权限的分布控制，如管理员和民宿管理员，二则所能够操作的权限有质的区别。</p>
<p>实现控制前端页面的导航展示(添加，修改，删除，查询)。</p>
<p>实现景点的发布(添加，修改，删除，查询)。</p>
<p>实现旅游攻略的发布(添加，修改，删除，查询)。</p>
<p>实现民宿预定(添加，修改，删除，查询)。</p>
<p>实现民宿房间管理(添加，修改，删除，查询)。</p>
<p>订单统计，订单评价</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[民宿管理员]<br>xierdun<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1S94y1f7Dg/">项目视频：基于Spring的旅游住宿小程序</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#x66;&#97;&#110;&#49;&#x6b;&#x65;&#50;&#107;&#101;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x66;&#97;&#110;&#49;&#x6b;&#x65;&#50;&#107;&#101;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的小程序商城</title>
    <url>/2022/05/22/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%95%86%E5%9F%8E/</url>
    <content><![CDATA[<p>基于SpringBoot的小程序商城.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>管理员数据统计，管理员设计师审核，商品管理，设计师管理，订单管理，订单评价，公告信息管理，论坛管理，论坛回复，用户与设计师消息通知，用户收货地址管理</p>
<p>用户申请设计师，用户订单添加购物车，订单付款评价，论坛消息回复，收货地址新增修改，修改商品信息</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户登陆注册</span></span><br><span class="line">String openid = JSON.parseObject(res).get(<span class="string">&quot;openid&quot;</span>).toString();</span><br><span class="line">System.out.println(<span class="string">&quot;openid&quot;</span> + openid);</span><br><span class="line">Integer count = userInfoService.count(Wrappers.&lt;UserInfo&gt;lambdaQuery().eq(UserInfo::getOpenId, openid));</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.ok(userInfoService.getOne(Wrappers.&lt;UserInfo&gt;lambdaQuery().eq(UserInfo::getOpenId, openid)));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    user.setOpenId(openid);</span><br><span class="line">    user.setCreateDate(DateUtil.formatDateTime(<span class="keyword">new</span> Date()));</span><br><span class="line">    user.setCode(<span class="string">&quot;U-&quot;</span>+<span class="keyword">new</span> Date().getTime());</span><br><span class="line">    user.setType(<span class="number">1</span>);</span><br><span class="line">    userInfoService.save(user);</span><br><span class="line">    <span class="keyword">return</span> R.ok(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找聊天信息</span></span><br><span class="line"><span class="keyword">if</span> (takeUser == userId) &#123;</span><br><span class="line">    messageInfoService.update(Wrappers.&lt;MessageInfo&gt;lambdaUpdate().set(MessageInfo::getTaskStatus, <span class="number">1</span>)</span><br><span class="line">            .eq(MessageInfo::getTakeUser, takeUser).eq(MessageInfo::getSendUser, sendUser));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    messageInfoService.update(Wrappers.&lt;MessageInfo&gt;lambdaUpdate().set(MessageInfo::getTaskStatus, <span class="number">1</span>)</span><br><span class="line">            .eq(MessageInfo::getTakeUser, sendUser).eq(MessageInfo::getSendUser, takeUser));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> R.ok(messageInfoService.getMessageDetail(takeUser, sendUser));</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 订单统计</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">DATE_FORMAT( spo.days, <span class="string">&#x27;%m-%d&#x27;</span> ) <span class="keyword">AS</span> days,</span><br><span class="line"><span class="built_in">COUNT</span>( oi.`code` ) <span class="keyword">AS</span> count,</span><br><span class="line">IFNULL( <span class="built_in">SUM</span>( oi.price ), <span class="number">0</span> ) <span class="keyword">AS</span> orderPrice</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">0</span> <span class="keyword">DAY</span> ) days <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">2</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">3</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">4</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">5</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">6</span> <span class="keyword">DAY</span> )) spo</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> order_info oi <span class="keyword">ON</span> (</span><br><span class="line">DATE_FORMAT( oi.create_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span> ) <span class="operator">=</span> DATE_FORMAT( spo.days, <span class="string">&#x27;%Y-%m-%d&#x27;</span> ))</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">days</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> days <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据商铺获取订单统计</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COUNT</span>( <span class="number">1</span> ) <span class="keyword">AS</span> orderNum,</span><br><span class="line">IFNULL( <span class="built_in">SUM</span>( oi.price ), <span class="number">0</span> ) <span class="keyword">AS</span> orderPrice,</span><br><span class="line">ui.avatar,</span><br><span class="line">ui.user_name,</span><br><span class="line">si.tag,</span><br><span class="line">si.introduction</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">order_info oi</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> commodity_info ci <span class="keyword">ON</span> ( ci.id <span class="operator">=</span> oi.commodity_id )</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_info si <span class="keyword">ON</span> ( si.id <span class="operator">=</span> ci.shop_id )</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_info ui <span class="keyword">ON</span> ( ui.id <span class="operator">=</span> si.user_id )</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">si.id</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 本月收益占比</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COUNT</span>( oi.commodity_id ) <span class="keyword">AS</span> orderNum,</span><br><span class="line">IFNULL( <span class="built_in">SUM</span>( oi.price ), <span class="number">0</span> ) <span class="keyword">AS</span> orderPrice,</span><br><span class="line">ci.`name`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">order_info oi</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> commodity_info ci <span class="keyword">ON</span> ( ci.id <span class="operator">=</span> oi.commodity_id )</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> DATE_FORMAT( oi.create_date, <span class="string">&#x27;%Y-%m&#x27;</span> ) <span class="operator">=</span> DATE_FORMAT( NOW(), <span class="string">&#x27;%Y-%m&#x27;</span> )</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">oi.commodity_id</span><br></pre></td></tr></table></figure>

<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1dP4y1N7wp/">项目视频：基于Spring小程序商城</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#110;&#49;&#x6b;&#x65;&#x32;&#x6b;&#x65;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#102;&#x61;&#110;&#49;&#x6b;&#x65;&#x32;&#x6b;&#x65;&#64;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>桶装水配送小程序和管理平台</title>
    <url>/2022/05/22/Java%E6%A1%B6%E8%A3%85%E6%B0%B4%E9%85%8D%E9%80%81%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>桶装水配送小程序和管理平台.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>微信小程序</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>管理员：账户登陆， 密码修改，订单收益，订单量统计，待发货商品统计，月统计订单量，月统计交易额，用户收货地址管理，公告信息管理，订单评价管理，用户订单管理，商品信息管理，消息回复，用户购物车，商铺管理，小程序用户管理</p>
<p>用户：小程序授权登陆，商铺搜索，商品查询，添加购物车，查看公告信息，商品下单，订单评价，收货地址管理</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1k5411R7RF/">项目视频：桶装水配送小程序</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#97;&#x6e;&#x31;&#107;&#x65;&#50;&#x6b;&#101;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#102;&#97;&#x6e;&#x31;&#107;&#x65;&#50;&#x6b;&#101;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-微服务架构划分</title>
    <url>/2022/05/23/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<h2 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a>分布式基础概念</h2><p>集群是个物理形态，分布式是个工作方式。</p>
<p>远程调用：在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的相互调用，我们成为远程调用</p>
<p>springcloud中使用HTTP+JSON的方式完成远程调用</p>
<h3 id="服务注册-发现-amp-注册中心"><a href="#服务注册-发现-amp-注册中心" class="headerlink" title="服务注册/发现&amp;注册中心"></a>服务注册/发现&amp;注册中心</h3><p>A服务调用B服务，A服务并不知道B服务当前在哪几台服务器有，那些是正常的，那些服务已经下线。解决这个问题可以引入注册中心。</p>
<p>配置中心用来几种管理微服务的配置信息。</p>
<h3 id="服务熔断-amp-服务降级"><a href="#服务熔断-amp-服务降级" class="headerlink" title="服务熔断&amp;服务降级"></a>服务熔断&amp;服务降级</h3><p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。</p>
<p>rpc远程调用情景：</p>
<p>订单服务 –&gt; 商品服务 –&gt; 库存服务</p>
<p>库存服务出现故障导致响应慢，导致商品服务需要等待，可能等到10s后库存服务才能响应。库存服务的不可用导致商品服务阻塞，商品服务等的期间，订单服务也处于阻塞。一个服务不可用导致整个服务链都阻塞。如果是高并发，第一个请求调用后阻塞10s得不到结果，第二个请求直接阻塞10s。更多的请求进来导致请求积压，全部阻塞，最终服务器的资源耗尽。导致雪崩</p>
<p>解决方案：</p>
<ol>
<li>服务熔断</li>
</ol>
<p>指定超时时间，库存服务3s没有响应就超时，如果经常失败，比如10s内100个请求都失败了。开启断路保护机制，下一次请求进来不调用库存服务了，因为上一次100%错误都出现了，我们直接在此中断，商品服务直接返回，返回一些默认数据或者null，而不调用库存服务了，这样就不会导致请求积压。</p>
<p>设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据</p>
<ol start="2">
<li>服务降级</li>
</ol>
<p>在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者处理简单【抛异常、返回NULL、调用Mock数据、调用Fallback处理逻辑】</p>
<h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><p>客户端发送请求到服务器路途中，设置一个网关，请求都先到达网关，网关对请求进行统一认证（合法非法）和处理等操作。他是安检。</p>
<p>在微服务架构中，API gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富的功能，帮助我们解决很多API管理难题。</p>
<p><a href="https://img-blog.csdnimg.cn/img_convert/b3a972ccdb5aa17ffaa4a443542032f0.png"><img src="https://img-blog.csdnimg.cn/img_convert/b3a972ccdb5aa17ffaa4a443542032f0.png" alt="OIVagf.png"></a></p>
<p>前后分离开发，分为内网部署和外网部署，外网是面向公众访问的，部署前端项目，可以有手机APP，电脑网页；内网部署的是后端集群，前端在页面上操作发送请求到后端，在这途中会经过Nginx集群，Nginx把请求转交给API网关(springcloud gateway)（网关可以根据当前请求动态地路由到指定的服务，看当前请求是想调用商品服务还是购物车服务还是检索），从路由过来如果请求很多，可以负载均衡地调用商品服务器中一台（商品服务复制了多份），当商品服务器出现问题也可以在网关层面对服务进行熔断或降级（使用阿里的sentinel组件），网关还有其他的功能如认证授权、限流（只放行部分到服务器）等。</p>
<p>到达服务器后进行处理（springboot为微服务），服务与服务可能会相互调用（使用OpenFeign组件），有些请求可能经过登录才能进行（基于OAuth2.0的认证中心。安全和权限使用springSecurity控制）</p>
<p>服务可能保存了一些数据或者需要使用缓存，我们使用redis集群（分片+哨兵集群）。持久化使用mysql，读写分离和分库分表。</p>
<p>服务和服务之间会使用消息队列（RabbitMQ），来完成异步解耦，分布式事务的一致性。有些服务可能需要全文检索，检索商品信息，使用ElaticSearch。</p>
<p>服务可能需要存取数据，使用阿里云的对象存储服务OSS。</p>
<p>项目上线后为了快速定位问题，使用ELK对日志进行处理，使用LogStash收集业务里的各种日志，把日志存储到ES中，用Kibana可视化页面从ES中检索出相关信息，帮助我们快速定位问题所在。</p>
<p>在分布式系统中，由于我们每个服务都可能部署在很多台机器，服务和服务可能相互调用，就得知道彼此都在哪里，所以需要将所有服务都注册到注册中心。服务从注册中心发现其他服务所在位置（使用阿里Nacos作为注册中心）。</p>
<p>每个服务的配置众多，为了实现改一处配置相同配置就同步更改，就需要配置中心，也使用阿里的Nacos，服务从配置中心中动态取配置。</p>
<p>服务追踪，追踪服务调用链哪里出现问题，使用springcloud提供的Sleuth、Zipkin、Metrics，把每个服务的信息交给开源的Prometheus进行聚合分析，再由Grafana进行可视化展示，提供Prometheus提供的AlterManager实时得到服务的告警信息，以短信/邮件的方式告知服务开发人员。</p>
<p>还提供了持续集成和持续部署。项目发布起来后，因为微服务众多，每一个都打包部署到服务器太麻烦，有了持续集成后开发人员可以将修改后的代码提交到github，运维人员可以通过自动化工具Jenkins Pipeline将github中获取的代码打包成docker镜像，最终是由k8s集成docker服务，将服务以docker容器的方式运行。</p>
<h3 id="相关功能技术"><a href="#相关功能技术" class="headerlink" title="相关功能技术"></a>相关功能技术</h3><ul>
<li>商品服务：商品的增删改查、商品的上下架、商品详情</li>
<li>支付服务</li>
<li>优惠服务</li>
<li>用户服务：用户的个人中心、收货地址</li>
<li>仓储服务：商品的库存</li>
<li>秒杀服务：定时任务与redis</li>
<li>订单服务：订单增删改查、验价、幂等性token</li>
<li>检索服务：商品的检索ES</li>
<li>中央认证服务：登录、注册、单点登录、社交登录</li>
<li>购物车服务：redis</li>
<li>后台管理系统：添加优惠信息等</li>
</ul>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>关于最近的一些选择</title>
    <url>/2022/05/23/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h2 id="卷土重来"><a href="#卷土重来" class="headerlink" title="卷土重来"></a>卷土重来</h2><p>2021年十月，我向上家公司提交了离职申请，在11月份正式离职。在家的很长时间都是自己一个人，计划的被打乱，唯一一件正事“驾照到手”。在家呆了四个月…</p>
<p>从今年二月底来到北京后，好兄弟陆陆续续给我介绍了几个毕设的定制项目，总共加起来也有两千多块钱</p>
<p>准备加紧做项目平台，但最近很不顺利。</p>
<ol>
<li><p>从四月七号入职开始，这家公司的加班算是严重，每天晚上都得九点左右到家，下班后的个人自由时间被排的满满的</p>
</li>
<li><p>28号晚上下班回来，鸿博家园一期B区发现一例阳性，目前隔离到现在已经持续一个月</p>
</li>
<li><p>入职这家公司后，我开始觉得自己是不是不适合做程序员这一行业</p>
</li>
</ol>
<p>对于今年找到的这份工作，我觉得自己很幸运，本身对自己的期望并没有那么高</p>
<h2 id="之后打算"><a href="#之后打算" class="headerlink" title="之后打算"></a>之后打算</h2><p>项目平台搁置到八月，最近一段时间准备好好卷卷尚硅谷的课程</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>基于VisualBox的Linux环境搭建</title>
    <url>/2022/05/24/%E5%9F%BA%E4%BA%8EVisualBox%E7%9A%84Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><code>VisualBox进行安装需要cpu开启虚拟化，在开机启动的时候设置主板，CPU configuration，然后点击Intel Vitualization Technology。重启电脑</code></p>
<h2 id="Linux镜像"><a href="#Linux镜像" class="headerlink" title="Linux镜像"></a>Linux镜像</h2><p>普通安装linux虚拟机太麻烦，可以利用vagrant可以帮助我们快速地创建一个虚拟机。装了vitualbox，vagrant可以帮助我们快速创建出一个虚拟机</p>
<p>去<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a> 下载vagrant安装，安装后重启系统。cmd中输入vagrant有版本代表成功了</p>
<p>输入<code>vagrant init centos/7</code>，即可初始化一个centos7系统。（注意这个命令在哪个目录下执行的，他的Vagrantfile就生成在哪里）</p>
<p>输入<code>vagrant up</code>启动虚拟机环境</p>
<p>启动后出现default folder:/cygdrive/c/User/… =&gt;/vagrant</p>
<p>vagrant ssh 就会连上虚拟机。可以使用exit退出</p>
<p>下次使用也可以直接vagrant up直接启动，但要确保当前目录在C:/用户/ 文件夹下，他下面有一个Vagrantfile，不过我们也可以配置环境变量。</p>
<p>启动后再次vagrant ssh连上即可</p>
<h2 id="虚拟机IP地址"><a href="#虚拟机IP地址" class="headerlink" title="虚拟机IP地址"></a>虚拟机IP地址</h2><p>使用的网络方式是网络地址转换NAT（端口转发），如果其他主机要访问虚拟机，必须由windows端口如3333断发给虚拟机端口如3306。这样每在linux里安一个软件都要进行端口映射，不方便，（也可以在virualBox里挨个设置）。我们想要给虚拟机一个固定的ip地址，windows和虚拟机可以互相ping通。</p>
<ol>
<li>在虚拟机中配置静态IP</li>
</ol>
<h2 id="添加账户密码"><a href="#添加账户密码" class="headerlink" title="添加账户密码"></a>添加账户密码</h2><p>默认只允许ssh登录方式，为了后来操作方便，文件上传等，我们可以配置允许账号密码登录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">修改</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">重启</span><br><span class="line">service sshd restart</span><br><span class="line">账号root</span><br><span class="line">密码vagrant</span><br></pre></td></tr></table></figure>

<h2 id="配置YUM源"><a href="#配置YUM源" class="headerlink" title="配置YUM源"></a>配置YUM源</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原yum源</span></span><br><span class="line"></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="comment"># 使用新yum源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo</span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><code>https://docs.docker.com/engine/install/centos/</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载系统之前的docker </span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">docker -v</span><br><span class="line">sudo docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>目前主流 Linux 发行版均已使用 systemd 进行服务管理，这里介绍如何在使用 systemd 的 Linux 发行版中配置镜像加速器。</p>
<p>请首先执行以下命令，查看是否在 docker.service 文件中配置过镜像地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl cat docker | grep <span class="string">&#x27;\-\-registry\-mirror&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果该命令有输出，那么请执行 $ systemctl cat docker 查看 ExecStart= 出现的位置，修改对应的文件内容去掉 –registry-mirror 参数及其值，并按接下来的步骤进行配置</p>
<p>如果以上命令没有任何输出，那么就可以在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后重新启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>检查加速器是否生效</p>
<p>执行 $ docker info，如果从结果中看到了如下内容，说明配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://hub-mirror.c.163.com/</span><br></pre></td></tr></table></figure>

<h2 id="安装mysql-docker"><a href="#安装mysql-docker" class="headerlink" title="安装mysql-docker"></a>安装mysql-docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行</span></span><br><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入已启动的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql bin/bash</span><br><span class="line"><span class="comment"># 退出进入的容器</span></span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"></span><br><span class="line">因为有目录映射，所以我们可以直接在镜像外执行</span><br><span class="line">vi /mydata/mysql/conf/my.conf </span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>如果直接挂载的话docker会以为挂载的是一个目录，所以我们先创建一个文件然后再挂载，在虚拟机中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在虚拟机中</span></span><br><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接进去redis客户端。</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure>

<p>默认是不持久化的。在配置文件中输入appendonly yes，就可以aof持久化了。修改完docker restart redis，docker -it redis redis-cli</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /mydata/redis/conf/redis.conf</span><br><span class="line"><span class="comment"># 插入下面内容</span></span><br><span class="line">appendonly yes</span><br><span class="line">保存</span><br><span class="line"></span><br><span class="line">docker restart redis</span><br></pre></td></tr></table></figure>

<p>设置redis容器在docker启动的时候启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure>

<h2 id="安装nginx-docker"><a href="#安装nginx-docker" class="headerlink" title="安装nginx docker"></a>安装nginx docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull nginx:1.10</span><br><span class="line"><span class="comment"># 随便启动一个nginx实例，只是为了复制出配置，放到docker里作为镜像的统一配置</span></span><br><span class="line">docker run -p 80:80 --name nginx -d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把nginx里的东西复制出来</span></span><br><span class="line"><span class="built_in">cd</span> /mydata/nginx</span><br><span class="line">docker container cp nginx:/etc/nginx .</span><br><span class="line">然后在外部 /mydata/nginx/nginx 有了一堆文件</span><br><span class="line">mv /mydata/nginx/nginx /mydata/nginx/conf</span><br><span class="line"><span class="comment"># 停掉nginx</span></span><br><span class="line">docker stop nginx</span><br><span class="line">docker rm nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的nginx，使用刚才复制出来的配置文件</span></span><br><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意一下这个路径映射到了/usr/share/nginx/html，我们在nginx配置文件中是写/usr/share/nginx/html，不是写/mydata/nginx/html</span></span><br><span class="line"></span><br><span class="line">docker update nginx --restart=always</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mydata/nginx/html/</span><br><span class="line">vim index.html</span><br><span class="line">随便写写</span><br><span class="line">测试 http://192.168.56.10:80</span><br></pre></td></tr></table></figure>

<h2 id="如何通过其他工具链接ssh"><a href="#如何通过其他工具链接ssh" class="headerlink" title="如何通过其他工具链接ssh"></a>如何通过其他工具链接ssh</h2><p>修改/etc/ssh/sshd_config</p>
<p>修改 PasswordAuthentication yes</p>
<p>systemctl restart sshd.service 或 service sshd restart</p>
<p>连接192.168.56.10:22端口成功，用户名root，密码vagrant</p>
<p>也可以通过vagrant ssh-config查看ip和端口，此时是127.0.0.1:2222</p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>突然感觉压力好大</title>
    <url>/2022/05/26/%E7%AA%81%E7%84%B6%E6%84%9F%E8%A7%89%E5%8E%8B%E5%8A%9B%E5%A5%BD%E5%A4%A7/</url>
    <content><![CDATA[<p>最近一直在家办公，每天都要和同事互通电话，昨晚甚至做梦梦到同事给我发微信消息</p>
<p>压力当然不一定是成长的动力</p>
<p>至少尼采说过这么一句话</p>
<blockquote>
<p>杀不死我的，让我更加强大</p>
</blockquote>
<p>这句话说的很有道理，如果压力过大以至于让你无暇他顾，严重损害了你的身体健康，甚至由于过劳而死，那很显然这不是什么好事情</p>
<p>我感觉压力是否能变成动力，除了不能过于强，还有就是取决于这个人的心态，如果他把压力看作成挑战，那么就容易成为动力，如果他总是充满了埋怨，那么就只能是折磨</p>
<p>心里很乱，不过也没有抱怨任何人，只是一时的负面情绪作祟，我想应该有部分人有这样的经历，在某个时间因为不经意的一句话或者一件很小的事突然引爆内心的负面情绪</p>
<p>最快乐的时光是刚毕业那两年，穷但是快乐，但是回想这一段经历，其实每个阶段都有各自的开心和烦恼</p>
<p>我知道你最近很累，是那种看不见的，身体上和精神上的疲惫感，但是请你一定要坚持下去。就算无人问津也<br>好，技不如人也罢，千万别让烦恼和焦虑毁了你本就不多的热情和定力。别贪心，我们不可能什么都有，别担<br>心，我们也不可能什么都没有。</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>本年答辩通过率100%</title>
    <url>/2022/05/25/%E9%A1%B9%E7%9B%AE%E4%BA%A4%E6%98%93%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<img src="https://s1.ax1x.com/2022/05/26/XA5QsI.jpg" alt="XE8dIg.jpg" border="0" height="100"/>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p><a href="https://www.zhihu.com/question/31020988">计算机毕设答辩时都会问到哪些问题？</a></p>
</blockquote>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/145911029">计算机专业毕业答辩小tips</a></p>
</blockquote>
<h2 id="现场提问"><a href="#现场提问" class="headerlink" title="现场提问"></a>现场提问</h2><p>首先一定是问你毕业设计的课题或者系统相关的问题，所以只要毕设是你自己做的，一般不会有问题的。一定要做到对课题或者系统做到熟悉，了如指掌，当老师让你展示某个部分的内容时要能及时准确的展示，并作出相关的讲解，给大家分享一些可能会问的问题，大家可以结合自己的项目试着回答一下</p>
<p><code>一定要注意不会不要瞎回答，诚实点，偶尔一个问题不会不影响什么的</code></p>
<ol>
<li>你这个系统所用到的新技术，它的优缺点，特点是什么？</li>
<li>你的论文价值是什么？</li>
<li>你数据库整体的设计是怎么样的？</li>
<li>某个表，某个字段作用是什么？</li>
<li>你系统核心功能怎么实现？</li>
<li>你的文献综述是如何形成的？</li>
<li>你整个系统的优缺点是什么?</li>
<li>功能还有什么地方需要完善?</li>
<li>你系统的整体设计是怎么样？</li>
<li>你系统用了什么技术,这些技术应用的好处是什么？</li>
<li>你的毕业论文进行的研究方法是什么？</li>
<li>你为什么要选这个题目，你对这个题目怎么理解的？</li>
<li>数据库的一些基础知识，三大范式是什么？</li>
<li>时序图，ER图你是怎么画的，有什么要注意的？</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://imgtu.com/i/XA5MQA"><img src="https://s1.ax1x.com/2022/05/26/XA5MQA.jpg" alt="XA5MQA.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5uzd"><img src="https://s1.ax1x.com/2022/05/26/XA5uzd.jpg" alt="XA5uzd.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5nRH"><img src="https://s1.ax1x.com/2022/05/26/XA5nRH.jpg" alt="XA5nRH.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5mJe"><img src="https://s1.ax1x.com/2022/05/26/XA5mJe.jpg" alt="XA5mJe.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5eiD"><img src="https://s1.ax1x.com/2022/05/26/XA5eiD.jpg" alt="XA5eiD.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA58df"><img src="https://s1.ax1x.com/2022/05/26/XA58df.jpg" alt="XA58df.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5lLt"><img src="https://s1.ax1x.com/2022/05/26/XA5lLt.jpg" alt="XA5lLt.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5Go8"><img src="https://s1.ax1x.com/2022/05/26/XA5Go8.jpg" alt="XA5Go8.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA53eP"><img src="https://s1.ax1x.com/2022/05/26/XA53eP.jpg" alt="XA53eP.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5YFS"><img src="https://s1.ax1x.com/2022/05/26/XA5YFS.jpg" alt="XA5YFS.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5tJg"><img src="https://s1.ax1x.com/2022/05/26/XA5tJg.jpg" alt="XA5tJg.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5NWQ"><img src="https://s1.ax1x.com/2022/05/26/XA5NWQ.jpg" alt="XA5NWQ.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5Uzj"><img src="https://s1.ax1x.com/2022/05/26/XA5Uzj.jpg" alt="XA5Uzj.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5dQs"><img src="https://s1.ax1x.com/2022/05/26/XA5dQs.jpg" alt="XA5dQs.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XE8dIg"><img src="https://s1.ax1x.com/2022/05/26/XE8dIg.md.jpg" alt="XE8dIg.md.jpg"></a></td>
<td><a href="https://imgse.com/i/zJjaZ9"><img src="https://s1.ax1x.com/2022/11/25/zJjaZ9.jpg" alt="zJjaZ9.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgse.com/i/zJjNqJ"><img src="https://s1.ax1x.com/2022/11/25/zJjNqJ.jpg" alt="zJjNqJ.jpg"></a></td>
<td><a href="https://imgse.com/i/zJjtr4"><img src="https://s1.ax1x.com/2022/11/25/zJjtr4.jpg" alt="zJjtr4.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgse.com/i/zJjdaR"><img src="https://s1.ax1x.com/2022/11/25/zJjdaR.jpg" alt="zJjdaR.jpg"></a></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat使用SQL文件将MySQL8.0导入到MySQL5.7</title>
    <url>/2022/05/26/MYSQL8%E6%96%87%E4%BB%B6%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<p>utf8mb4替换为utf8</p>
<p>utf8mb4_0900_ai_ci替换为utf8_general_ci</p>
<p>utf8_croatian_ci替换为utf8_general_ci</p>
<p>utf8mb4_general_ci替换为utf8_general_ci</p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Java两个List间并集与差集</title>
    <url>/2022/05/27/Java%E4%B8%A4%E4%B8%AAList%E9%97%B4%E5%8F%96%E5%B9%B6%E9%9B%86%E4%B8%8E%E5%B7%AE%E9%9B%86/</url>
    <content><![CDATA[<blockquote>
<p>今天下午在家办公遇到个问题，手动调用公式计算得分，需要对之前的得分进行修改操作，条件是根据多个字段，确实难搞哇，弄了一下午</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置综合得分返回数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scoreParam 综合得分信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evaluationType 评价类型（年度、季度）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> calculateScoreList 当前计算的得分数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 综合得分数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SupplierComscore&gt; <span class="title">comScoreUpsert</span><span class="params">(SupplierComscore scoreParam, String evaluationType, List&lt;SupplierComscore&gt; calculateScoreList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;SupplierComscore&gt; updateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已入库的得分数据</span></span><br><span class="line">    List&lt;SupplierComscore&gt; scoreList = supplierComscoreService.selectComscoreList(scoreParam, evaluationType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改的数据</span></span><br><span class="line">    List&lt;SupplierComscore&gt; resultList = calculateScoreList.stream()</span><br><span class="line">            .filter(item -&gt; scoreList.stream().map(e -&gt; e.getSupplierCode() + <span class="string">&quot;|&quot;</span> + e.getProductType())</span><br><span class="line">                    .collect(Collectors.toList()).contains(item.getSupplierCode() + <span class="string">&quot;|&quot;</span> + item.getProductType()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取得分结果信息</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(resultList)) &#123;</span><br><span class="line">        resultList.forEach(item -&gt; &#123;</span><br><span class="line">            scoreList.stream().filter(e -&gt; e.getSupplierCode().equals(item.getSupplierCode()) &amp;&amp; e.getProductType().equals(item.getProductType()))</span><br><span class="line">                    .findFirst().ifPresent(s -&gt; &#123;</span><br><span class="line">                item.setId(s.getId());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断综合评分是否修改</span></span><br><span class="line">                <span class="keyword">if</span> (s.getBaseScore() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setBaseScore(item.getScore());</span><br><span class="line">                    item.setScore(s.getScore());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断指标得分是否修改</span></span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isNotBlank(s.getBaseIndexData())) &#123;</span><br><span class="line">                    item.setBaseIndexData(item.getIndexData());</span><br><span class="line">                    item.setIndexData(s.getIndexData());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断供应商评级是否修改</span></span><br><span class="line">                <span class="keyword">if</span> (s.getBaseSupplierLevel() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setBaseSupplierLevel(item.getSupplierLevel());</span><br><span class="line">                    item.setSecretLevel(s.getSecretLevel());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置原先数据状态</span></span><br><span class="line">                item.setStatus(s.getStatus());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        updateList = resultList.stream().filter(e -&gt;</span><br><span class="line">                StrUtil.toString(e.getStatus()).equals(SalmKpiConstants.ASSESS_STATUS_EVALUATE_RELEASED) || StrUtil.toString(e.getStatus()).equals(SalmKpiConstants.ASSESS_STATUS_EVALUATE_REJECTED))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增的数据</span></span><br><span class="line">    List&lt;SupplierComscore&gt; otherList = calculateScoreList.stream().filter(item -&gt; !resultList.contains(item)).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> ListUtils.union(otherList, updateList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>APEX</title>
    <url>/2022/05/29/APEX5.28/</url>
    <content><![CDATA[<blockquote>
<p>2022.5.28</p>
</blockquote>
<p>今天是本年来北京第一次玩APEX，爽！</p>
<p><img src="https://s1.ax1x.com/2022/05/28/XKsbv9.md.png" alt="XKsbv9.md.png"></p>
<blockquote>
<p>2022.5.29</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/05/30/XlZap4.png" alt="XlZap4.png"></p>
<p><img src="https://s1.ax1x.com/2022/05/30/XlZNhF.png" alt="XlZNhF.png"></p>
<blockquote>
<p>2022.5.30</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/05/30/X3kwo8.png" alt="X3kwo8.png"></p>
<p><img src="https://s1.ax1x.com/2022/05/30/X3kddf.png" alt="X3kddf.png"></p>
<blockquote>
<p>2022.6.2</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/06/03/XNr9bT.png" alt="XNr9bT.png"></p>
<blockquote>
<p>2022.6.5</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/06/11/XcMfeK.png" alt="XcMfeK.png"></p>
<blockquote>
<p>2022.6.7</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/06/11/XcM2sx.png" alt="XcM2sx.png"></p>
<blockquote>
<p>2022.6.8</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/06/11/XcMRL6.png" alt="XcMRL6.png"></p>
<blockquote>
<p>2022.6.12</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/06/19/XXK7T0.png" alt="XXK7T0.png"></p>
<blockquote>
<p>2022.6.18</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2022/06/19/XXKTwq.png" alt="XXKTwq.png"></p>
]]></content>
      <tags>
        <tag>APEX</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范</title>
    <url>/2022/05/28/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>【基础】<br>1，变量/类/文件命名要规范（大小写，含义）<br>2，注释适度<br>3，代码整形<br>4，禁止相同处理重复copy</p>
<p>【提高】<br>1，考虑空指针场景<br>2，考虑数据类型精度<br>3，考虑事务的回滚（后端）<br>4，考虑异常时的处理机制</p>
<p>【性能】<br>1，减少无效循环次数<br>2，减少数据库访问次数（后端）</p>
<h2 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h2><table>
<thead>
<tr>
<th>前缀名</th>
<th>意义</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>create</td>
<td>创建</td>
<td>createOrder()</td>
</tr>
<tr>
<td>delete</td>
<td>删除</td>
<td>deleteOrder()</td>
</tr>
<tr>
<td>add</td>
<td>创建，暗示新创建的对象属于某个集合</td>
<td>addPaidOrder()</td>
</tr>
<tr>
<td>remove</td>
<td>删除</td>
<td>removeOrder()</td>
</tr>
<tr>
<td>init或则initialize</td>
<td>初始化，暗示会做些诸如获取资源等特殊动作</td>
<td>initializeObjectPool()</td>
</tr>
<tr>
<td>destroy</td>
<td>销毁，暗示会做些诸如释放资源的特殊动作</td>
<td>destroyObjectPool()</td>
</tr>
<tr>
<td>open</td>
<td>打开</td>
<td>openConnection()</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
<td>closeConnection()</td>
</tr>
<tr>
<td>read</td>
<td>读取</td>
<td>readUserName()</td>
</tr>
<tr>
<td>write</td>
<td>写入</td>
<td>writeUserName()</td>
</tr>
<tr>
<td>get</td>
<td>获得</td>
<td>getName()</td>
</tr>
<tr>
<td>set</td>
<td>设置</td>
<td>setName()</td>
</tr>
<tr>
<td>prepare</td>
<td>准备</td>
<td>prepareOrderList()</td>
</tr>
<tr>
<td>copy</td>
<td>复制</td>
<td>copyCustomerList()</td>
</tr>
<tr>
<td>modity</td>
<td>修改</td>
<td>modifyActualTotalAmount()</td>
</tr>
<tr>
<td>calculate</td>
<td>数值计算</td>
<td>calculateCommission()</td>
</tr>
<tr>
<td>do</td>
<td>执行某个过程或流程</td>
<td>doOrderCancelJob()</td>
</tr>
<tr>
<td>dispatch</td>
<td>判断程序流程转向</td>
<td>dispatchUserRequest()</td>
</tr>
<tr>
<td>start</td>
<td>开始</td>
<td>startOrderProcessing()</td>
</tr>
<tr>
<td>stop</td>
<td>结束</td>
<td>stopOrderProcessing()</td>
</tr>
<tr>
<td>send</td>
<td>发送某个消息或事件</td>
<td>sendOrderPaidMessage()</td>
</tr>
<tr>
<td>receive</td>
<td>接受消息或时间</td>
<td>receiveOrderPaidMessgae()</td>
</tr>
<tr>
<td>respond</td>
<td>响应用户动作</td>
<td>responseOrderListItemClicked()</td>
</tr>
<tr>
<td>find</td>
<td>查找对象</td>
<td>findNewSupplier()</td>
</tr>
<tr>
<td>update</td>
<td>更新对象</td>
<td>updateCommission()</td>
</tr>
</tbody></table>
<h2 id="减少代码嵌套层次"><a href="#减少代码嵌套层次" class="headerlink" title="减少代码嵌套层次"></a>减少代码嵌套层次</h2><p>代码嵌套层次达 3 层以上时，一般人理解起来都会困难</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">            doJobA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt; c) &#123;</span><br><span class="line">            doJobB()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &lt; c) &#123;</span><br><span class="line">                    doJobC();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>减少嵌套的方法</p>
<ol>
<li>合并条件</li>
<li>利用 return 以省略后面的 else</li>
<li>利用子方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b &amp;&amp; b &gt; c) &#123;</span><br><span class="line">        doJobA();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b &amp;&amp; c &gt; b) &#123;</span><br><span class="line">        doJobB();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b &amp;&amp; c &lt; b &amp;&amp; a &lt; c) &#123;</span><br><span class="line">        doJobC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口类中的方法和属性不要加任何修饰符号"><a href="#接口类中的方法和属性不要加任何修饰符号" class="headerlink" title="接口类中的方法和属性不要加任何修饰符号"></a>接口类中的方法和属性不要加任何修饰符号</h2><p>接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁<br>性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>与接口方法相关，并且是整个应用的基础常量。</p>
<h2 id="各层命名规约"><a href="#各层命名规约" class="headerlink" title="各层命名规约"></a>各层命名规约</h2><blockquote>
<p>Service/DAO 层方法命名规约</p>
</blockquote>
<p>1） 获取单个对象的方法用 get 做前缀。</p>
<p>2） 获取多个对象的方法用 list 做前缀。</p>
<p>3） 获取统计值的方法用 count 做前缀。</p>
<p>4） 插入的方法用 save/insert 做前缀。</p>
<p>5） 删除的方法用 remove/delete 做前缀。</p>
<p>6） 修改的方法用 update 做前缀。</p>
<blockquote>
<p>领域模型命名规约</p>
</blockquote>
<p>1） 数据对象：xxxDO，xxx 即为数据表名。</p>
<p>2） 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p>
<p>3） 展示对象：xxxVO，xxx 一般为网页名称。</p>
<p>4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</p>
<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2><blockquote>
<p>不允许任何魔法值（即未经定义的常量）直接出现在代码中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">反例：String key = <span class="string">&quot;Id#taobao_&quot;</span> + tradeId;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>long 或者 Long 初始赋值时，使用大写的 L，不能是小写的 l，小写容易跟数字 1 混<br>淆，造成误解。</p>
</blockquote>
<blockquote>
<p>大括号的使用约定</p>
</blockquote>
<p>如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果<br>是非空代码块则</p>
<p>1.左大括号前不换行。</p>
<p>2.左大括号后换行。</p>
<p>3.右大括号前换行。</p>
<p>4.右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</p>
<h2 id="OOP-规约"><a href="#OOP-规约" class="headerlink" title="OOP 规约"></a>OOP 规约</h2><blockquote>
<p>避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成<br>本，直接用类名来访问即可</p>
</blockquote>
<blockquote>
<p>相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">正例：<span class="function"><span class="keyword">public</span> User <span class="title">getUsers</span><span class="params">(String type, Integer... ids)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生<br>影响。接口过时必须加@Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</p>
</blockquote>
<blockquote>
<p>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用<br>equals。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">正例：<span class="string">&quot;test&quot;</span>.equals(object);</span><br><span class="line">反例：object.equals(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。</p>
</blockquote>
<p>对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在<br>IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行<br>判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑，<br>推荐使用 equals 方法进行判断。</p>
<blockquote>
<p>关于基本数据类型与包装数据类型的使用标准</p>
</blockquote>
<p>1） 【强制】所有的 POJO 类属性必须使用包装数据类型。</p>
<p>2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。</p>
<p>3） 【推荐】所有的局部变量使用基本数据类型。</p>
<h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><blockquote>
<p>关于 hashCode 和 equals 的处理</p>
</blockquote>
<p>1） 只要重写 equals，就必须重写 hashCode。</p>
<p>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的<br>对象必须重写这两个方法。</p>
<p>3） 如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。</p>
<blockquote>
<p>使用集合转数组的方法，必须使用集合的 toArray(T[] array)</p>
</blockquote>
<p>使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配<br>内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[ list.size() ]的数组<br>元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素<br>个数一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>); </span><br><span class="line">list.add(<span class="string">&quot;guan&quot;</span>); </span><br><span class="line">list.add(<span class="string">&quot;bao&quot;</span>); </span><br><span class="line">String[] array = <span class="keyword">new</span> String[list.size()]; </span><br><span class="line">array = list.toArray(array);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方<br>法</p>
</blockquote>
<p>asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList<br>体现的是适配器模式，只是转换接口，后台的数据仍是数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] str = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;you&quot;</span>, <span class="string">&quot;wu&quot;</span> &#125;;</span><br><span class="line"> List list = Arrays.asList(str);</span><br><span class="line">第一种情况：list.add(<span class="string">&quot;yangguanbao&quot;</span>); 运行时异常。</span><br><span class="line">第二种情况：str[<span class="number">0</span>] = <span class="string">&quot;gujin&quot;</span>; 那么 list.get(<span class="number">0</span>)也会随之修改。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator<br>方式，如果并发操作，需要对 Iterator 对象加锁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = list.iterator(); </span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123; </span><br><span class="line">        String item = iterator.next(); </span><br><span class="line">        <span class="keyword">if</span> (删除元素的条件) &#123; </span><br><span class="line">            iterator.remove(); </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>集合初始化时，指定集合初始值大小</p>
</blockquote>
<p>HashMap 使用 HashMap(int initialCapacity) 初始化</p>
<p>initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loader<br>factor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）</p>
<blockquote>
<p>使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历</p>
</blockquote>
<p>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出<br>key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效<br>率更高。如果是 JDK8，使用 Map.foreach 方法。</p>
<blockquote>
<p>利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的<br>contains 方法进行遍历、对比、去重操作</p>
</blockquote>
<h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><blockquote>
<p>在一个 switch 块内，每个 case 要么通过 break/return 等来终止，要么注释说明程<br>序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且<br>放在最后，即使它什么代码也没有</p>
</blockquote>
<blockquote>
<p>在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免采用<br>单行的编码方式：if (condition) statements;</p>
</blockquote>
<blockquote>
<p>表达异常的分支时，少用 if-else 方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123; </span><br><span class="line"> ... </span><br><span class="line"> <span class="keyword">return</span> obj; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 接着写 else 的业务逻辑代码; </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、<br>获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）</p>
</blockquote>
<blockquote>
<p>下列情形，需要进行参数校验</p>
</blockquote>
<p>1） 调用频次低的方法。</p>
<p>2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参<br>数错误导致中间执行回退，或者错误，那得不偿失。</p>
<p>3） 需要极高稳定性和可用性的方法。</p>
<p>4） 对外提供的开放接口，不管是 RPC/API/HTTP 接口。</p>
<p>5） 敏感权限入口。</p>
<h2 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h2><blockquote>
<p>不要使用 count(列名)或 count(常量)来替代 count(<em>)，count(</em>)是 SQL92 定义的<br>标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关</p>
</blockquote>
<p>count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行</p>
<blockquote>
<p>当某一列的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为<br>NULL，因此使用 sum()时需注意 NPE 问题</p>
</blockquote>
<blockquote>
<p>使用 ISNULL()来判断是否为 NULL 值</p>
</blockquote>
<blockquote>
<p>不得使用外键与级联，一切外键概念必须在应用层解决</p>
</blockquote>
<blockquote>
<p>禁止使用存储过程，存储过程难以调试和扩展，更没有移植性</p>
</blockquote>
<blockquote>
<p>in 操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控<br>制在 1000 个之内。</p>
</blockquote>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离微信扫码登陆token授权方案</title>
    <url>/2022/05/31/Vue%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86/</url>
    <content><![CDATA[<blockquote>
<p>前端Vue 后端SpringBoot</p>
</blockquote>
<p>页面加载时声明一个变量state=’时间戳+6位随机数’，其中有个state参数需要我们传递，这个参数你传什么，微信回调的时候就会给你返回什么。 我们用之前生成那个state，当用户点击微信登录的按钮，我们就通过以state值为key和后端进行websocket连接</p>
<h2 id="前端设置socket链接"><a href="#前端设置socket链接" class="headerlink" title="前端设置socket链接"></a>前端设置socket链接</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wsname = <span class="string">&quot;ws://xxxxx:xxx/socketServer/&quot;</span> + <span class="built_in">this</span>.state;</span><br><span class="line"><span class="built_in">this</span>.ws = <span class="keyword">new</span> WebSocket(wsname);</span><br><span class="line"><span class="comment">//连接成功触发</span></span><br><span class="line"><span class="built_in">this</span>.ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这个是接收后台发送信息的方法</span></span><br><span class="line"><span class="built_in">this</span>.ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(evt.data);</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line"> <span class="comment">//在这里判断后台给的用户信息和token  并进行相应的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/socketServer/&#123;userid&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Session session;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Session&gt; sessionPool = <span class="keyword">new</span> HashMap&lt;String,Session&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; sessionIds = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 用户连接时触发</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@OnOpen</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Session session,<span class="meta">@PathParam(value=&quot;userid&quot;)</span>String userid)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.session = session;</span><br><span class="line">		sessionPool.put(userid, session);</span><br><span class="line">		sessionIds.put(session.getId(), userid);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 收到信息时触发</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@OnMessage</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;当前发送人sessionid为&quot;</span>+session.getId()+<span class="string">&quot;发送内容为&quot;</span>+message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 连接关闭触发</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@OnClose</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">		sessionPool.remove(sessionIds.get(session.getId()));</span><br><span class="line">		sessionIds.remove(session.getId());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发生错误时触发</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *信息发送的方法</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message,String userId)</span></span>&#123;</span><br><span class="line">		Session s = sessionPool.get(userId);</span><br><span class="line">		<span class="keyword">if</span>(s!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				s.getBasicRemote().sendText(message);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提供给前端发送信息的api"><a href="#提供给前端发送信息的api" class="headerlink" title="提供给前端发送信息的api"></a>提供给前端发送信息的api</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/sendpost&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendPost</span><span class="params">(<span class="meta">@RequestBody</span> Params params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (params.getJson() == <span class="keyword">null</span> || params.getUserid() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SocketServer.sendMessage(params.getJson(),params.getUserid());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信回调代码"><a href="#微信回调代码" class="headerlink" title="微信回调代码"></a>微信回调代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/callback&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthCallback callback)</span> </span>&#123;</span><br><span class="line">    AuthUser authUser = <span class="keyword">null</span>;</span><br><span class="line">    AuthRequest authRequest = getAuthRequest();</span><br><span class="line">    AuthResponse response = authRequest.login(callback);</span><br><span class="line">    UserInfo user = <span class="keyword">new</span> UserInfo();</span><br><span class="line">    <span class="keyword">if</span>(response.getData() <span class="keyword">instanceof</span> AuthUser) &#123;</span><br><span class="line">        authUser =  (AuthUser)response.getData();</span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        WechatUserInfo wechatUser = <span class="keyword">new</span> WechatUserInfo();</span><br><span class="line">        wechatUser.setOpenId(authUser.getRawUserInfo().get(<span class="string">&quot;openid&quot;</span>).toString());</span><br><span class="line">        wechatUser.setNickName(authUser.getRawUserInfo().get(<span class="string">&quot;nickname&quot;</span>).toString());</span><br><span class="line">        <span class="keyword">if</span> (authUser.getRawUserInfo().get(<span class="string">&quot;sex&quot;</span>) == <span class="keyword">null</span> || authUser.getRawUserInfo().get(<span class="string">&quot;sex&quot;</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            wechatUser.setSex(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wechatUser.setSex(Integer.parseInt(authUser.getRawUserInfo().get(<span class="string">&quot;sex&quot;</span>).toString()));</span><br><span class="line">        &#125;</span><br><span class="line">        wechatUser.setHeadImgUrl(authUser.getRawUserInfo().get(<span class="string">&quot;headimgurl&quot;</span>).toString());</span><br><span class="line">        user = userInfoService.wxCallBack(wechatUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加访问记录</span></span><br><span class="line">    HttpServletRequest request = HttpContextUtil.getHttpServletRequest();</span><br><span class="line">    String ip = IPUtil.getIpAddr(request);</span><br><span class="line">    accessInfoService.save(<span class="keyword">new</span> AccessInfo(ip, AddressUtil.getCityInfo(ip), DateUtil.formatDateTime(<span class="keyword">new</span> Date())));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//这里是将结果通过websocket返回给前端</span></span><br><span class="line">        System.out.println(HttpUtil.doPost(“http:<span class="comment">//www.niezhiliang.com:8086/websocket/sendpost”,user));</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>知识记录</title>
    <url>/2022/06/01/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    <content><![CDATA[<h2 id="使用Stream流获取唯一一个或首个的操作"><a href="#使用Stream流获取唯一一个或首个的操作" class="headerlink" title="使用Stream流获取唯一一个或首个的操作"></a>使用Stream流获取唯一一个或首个的操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(supplierList)) &#123;</span><br><span class="line">    supplierList.stream().filter(s -&gt; s.getSupplierCode().equals(resultData.getSupplierCode())).findFirst().ifPresent(s -&gt; resultData.setSupplierName(s.getSupplierName()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Apple&gt;&gt; groupBy = appleList.stream().collect(Collectors.groupingBy(Apple::getId));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>List转Map</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Apple&gt; appleMap = appleList.stream().collect(Collectors.toMap(Apple::getId, a -&gt; a,(k1,k2)-&gt;k1));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>total</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal totalMoney = appleList.stream().map(Apple::getMoney).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br></pre></td></tr></table></figure>

<h2 id="groupBy-实现的-list-转-map"><a href="#groupBy-实现的-list-转-map" class="headerlink" title="groupBy 实现的 list 转 map"></a>groupBy 实现的 list 转 map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; <span class="function">Map&lt;K, T&gt; <span class="title">list2Map</span><span class="params">(<span class="meta">@NonNull</span> Collection&lt;T&gt; list, <span class="meta">@NonNull</span> Function&lt;? <span class="keyword">super</span> T, K&gt; keyFunc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().collect(Collectors.toMap(keyFunc, Function.identity(),</span><br><span class="line">                (u, v) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String.format(<span class="string">&quot;Multiple entries with same key,%s=%s,%s=%s&quot;</span>,</span><br><span class="line">                            keyFunc.apply(u), u,</span><br><span class="line">                            keyFunc.apply(v), v));</span><br><span class="line">                &#125;,</span><br><span class="line">                HashMap::<span class="keyword">new</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Player&gt; newList = playerList.stream().collect(Collectors .collectingAndThen( Collectors.toCollection(() -&gt; <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(Player::getName))), ArrayList::<span class="keyword">new</span>)); newList.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="创建空集合"><a href="#创建空集合" class="headerlink" title="创建空集合"></a>创建空集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.emptyList()</span><br></pre></td></tr></table></figure>

<h2 id="获取集合最小值-为空添加默认值"><a href="#获取集合最小值-为空添加默认值" class="headerlink" title="获取集合最小值(为空添加默认值)"></a>获取集合最小值(为空添加默认值)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">evaluateBaseEntry.getValue().stream()</span><br><span class="line">        .map(SupplierEvaluateBaseinfo::getSecretLevel)</span><br><span class="line">        .filter(Objects::nonNull)</span><br><span class="line">        .min(Comparator.comparing(Integer::valueOf)).orElse(<span class="string">&quot;5&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="list对象两个属性相乘在相加"><a href="#list对象两个属性相乘在相加" class="headerlink" title="list对象两个属性相乘在相加"></a>list对象两个属性相乘在相加</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">item.stream().map(p -&gt; p.getQuantity().multiply(p.getUnitPrice())).reduce(BigDecimal::add).orElse(BigDecimal.ZERO)</span><br></pre></td></tr></table></figure>

<h2 id="Java-Stream递归"><a href="#Java-Stream递归" class="headerlink" title="Java Stream递归"></a>Java Stream递归</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Java Stream递归</span></span><br><span class="line"><span class="comment">* 当找不到子级权限的时候map操作不会再递归调用covert</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> UmsPermissionNode <span class="title">covert</span><span class="params">(UmsPermission permission, List&lt;UmsPermission&gt; permissionList)</span> </span>&#123;</span><br><span class="line">    UmsPermissionNode node = <span class="keyword">new</span> UmsPermissionNode();</span><br><span class="line">    BeanUtils.copyProperties(permission, node);</span><br><span class="line">    List&lt;UmsPermissionNode&gt; children = permissionList.stream()</span><br><span class="line">           .filter(subPermission -&gt; subPermission.getPid().equals(permission.getId()))</span><br><span class="line">           .map(subPermission -&gt; covert(subPermission, permissionList)).collect(Collectors.toList());</span><br><span class="line">    node.setChildren(children);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="java-stream-多属性过滤"><a href="#java-stream-多属性过滤" class="headerlink" title="java stream 多属性过滤"></a>java stream 多属性过滤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SupplierEvaluationYear&gt; filter = supEvaluationYearList.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .filter(e -&gt; !(supplierEvaluationYears.stream()</span><br><span class="line">                .map(y -&gt; y.getSupplierId() + <span class="string">&quot;:&quot;</span> + y.getPurchaseId() + <span class="string">&quot;:&quot;</span> + y.getProductType() + <span class="string">&quot;:&quot;</span> + y.getYear())</span><br><span class="line">                .collect(toList())</span><br><span class="line">                .contains(e.getSupplierId() + <span class="string">&quot;:&quot;</span> + e.getPurchaseId() + <span class="string">&quot;:&quot;</span> + e.getProductType() + <span class="string">&quot;:&quot;</span> + e.getYear())))</span><br><span class="line">        .collect(toList());</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Java枚举类的使用</title>
    <url>/2022/06/11/Java%E6%9E%9A%E4%B8%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="使用枚举类可以帮助我们更方便的获取固定属性值"><a href="#使用枚举类可以帮助我们更方便的获取固定属性值" class="headerlink" title="使用枚举类可以帮助我们更方便的获取固定属性值"></a>使用枚举类可以帮助我们更方便的获取固定属性值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 季度年度标识枚举</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> FanK</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-06-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IndexConfigurationSuffixEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 季度标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUPPLIER_SCORES_CONFIGURATION_QUARTER_STR(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;季&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年度标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUPPLIER_SCORES_CONFIGURATION_YEAR_STR(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;年&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line">    <span class="keyword">private</span> String indexConfigurationTimeStr;</span><br><span class="line"></span><br><span class="line">    IndexConfigurationSuffixEnum(String time, String indexConfigurationTimeStr) &#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">        <span class="keyword">this</span>.indexConfigurationTimeStr = indexConfigurationTimeStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据数值 获取对应的名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValueByTime</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (IndexConfigurationSuffixEnum categoryEnum : IndexConfigurationSuffixEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (categoryEnum.getTime().equals(time)) &#123;</span><br><span class="line">                <span class="keyword">return</span> categoryEnum.getIndexConfigurationTimeStr();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIndexConfigurationTimeStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexConfigurationTimeStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndexConfigurationTimeStr</span><span class="params">(String indexConfigurationTimeStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.indexConfigurationTimeStr = indexConfigurationTimeStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String suffix = IndexConfigurationSuffixEnum.getValueByTime(time);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Java批量入库异步多线程更新</title>
    <url>/2022/06/19/Java%E6%89%B9%E9%87%8F%E5%85%A5%E5%BA%93%E6%9B%B4%E6%96%B0%E5%BC%82%E6%AD%A5%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>数据量极大的情况下的批量操作，效率问题</p>
</blockquote>
<ol>
<li>获取需要进行批量更新的大集合A，对大集合进行拆分操作，分成N个小集合A-1 ~ A-N </li>
<li>开启线程池，针对集合的大小进行调参，对小集合进行批量更新操作</li>
<li>对流程进行控制，控制线程执行顺序</li>
</ol>
<h2 id="按照指定大小拆分集合的工具类"><a href="#按照指定大小拆分集合的工具类" class="headerlink" title="按照指定大小拆分集合的工具类"></a>按照指定大小拆分集合的工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拆分结合工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shiwen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitListUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拆分集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 泛型对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resList 需要拆分的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subListLength 每个子集合的元素个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回拆分后的各个集合组成的列表</span></span><br><span class="line"><span class="comment">     * 代码里面用到了guava和common的结合工具类</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;List&lt;T&gt;&gt; split(List&lt;T&gt; resList, <span class="keyword">int</span> subListLength) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(resList) || subListLength &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Lists.newArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;T&gt;&gt; ret = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">int</span> size = resList.size();</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= subListLength) &#123;</span><br><span class="line">            <span class="comment">// 数据量不足 subListLength 指定的大小</span></span><br><span class="line">            ret.add(resList);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> pre = size / subListLength;</span><br><span class="line">            <span class="keyword">int</span> last = size % subListLength;</span><br><span class="line">            <span class="comment">// 前面pre个集合，每个大小都是 subListLength 个元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre; i++) &#123;</span><br><span class="line">                List&lt;T&gt; itemList = Lists.newArrayList();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; subListLength; j++) &#123;</span><br><span class="line">                    itemList.add(resList.get(i * subListLength + j));</span><br><span class="line">                &#125;</span><br><span class="line">                ret.add(itemList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// last的进行处理</span></span><br><span class="line">            <span class="keyword">if</span> (last &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                List&lt;T&gt; itemList = Lists.newArrayList();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; last; i++) &#123;</span><br><span class="line">                    itemList.add(resList.get(pre * subListLength + i));</span><br><span class="line">                &#125;</span><br><span class="line">                ret.add(itemList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">1099</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;hello-&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 大集合里面包含多个小集合</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; temps = split(list, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 对大集合里面的每一个小集合进行操作</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; obj : temps) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;row:%s -&gt; size:%s,data:%s&quot;</span>, ++j, obj.size(), obj));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="开启异步执行任务的线程池"><a href="#开启异步执行任务的线程池" class="headerlink" title="开启异步执行任务的线程池"></a>开启异步执行任务的线程池</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; updateList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="comment">// 初始化线程池, 参数一定要一定要一定要调好！！！！</span></span><br><span class="line">    ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">20</span>, <span class="number">50</span>,</span><br><span class="line">            <span class="number">4</span>, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">10</span>), <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">    <span class="comment">// 大集合拆分成N个小集合, 这里集合的size可以稍微小一些（这里我用100刚刚好）, 以保证多线程异步执行, 过大容易回到单线程</span></span><br><span class="line">    List&lt;T&gt; splitNList = SplitListUtils.split(totalList, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 记录单个任务的执行次数</span></span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(splitNList.size());</span><br><span class="line">    <span class="comment">// 对拆分的集合进行批量处理, 先拆分的集合, 再多线程执行</span></span><br><span class="line">    <span class="keyword">for</span> (List&lt;T&gt; singleList : splitNList) &#123;</span><br><span class="line">        <span class="comment">// 线程池执行</span></span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (Entity yangshiwen : singleList) &#123;</span><br><span class="line">                    <span class="comment">// 将每一个对象进行数据封装, 并添加到一个用于存储更新数据的list</span></span><br><span class="line">                    <span class="comment">// ......</span></span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="comment">// 任务个数 - 1, 直至为0时唤醒await()</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 让当前线程处于阻塞状态，直到锁存器计数为零</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessLogException(ResponseEnum.FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过mybatis的批量插入的方式来进行数据的插入, 这一步还是要做判空</span></span><br><span class="line">    <span class="keyword">if</span> (GeneralUtil.listNotNull(updateList)) &#123;</span><br><span class="line">        batchUpdateEntity(updateList);</span><br><span class="line">        LogUtil.info(<span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Java浅拷贝工具类</title>
    <url>/2022/06/18/Java%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.beans.BeanCopier;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象拷贝</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/05 09:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 拷贝源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classTargetType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E&gt; <span class="function">E <span class="title">clone</span><span class="params">(T source, Class&lt;E&gt; classTargetType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        E targetInstance;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            targetInstance = classTargetType.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        BeanUtils.copyProperties(source, targetInstance);</span><br><span class="line">        <span class="keyword">return</span> targetInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝数组对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList 拷贝源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E&gt; <span class="function">List&lt;E&gt; <span class="title">batchClone</span><span class="params">(List&lt;T&gt; sourceList, Class&lt;E&gt; classType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;E&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T t : sourceList) &#123;</span><br><span class="line">            result.add(clone(t, classType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceObj   被拷贝对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass 拷贝类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">convertToTarget</span><span class="params">(Object sourceObj, Class&lt;T&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        T targetObj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            targetObj = targetClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(sourceObj, targetObj);</span><br><span class="line">        <span class="keyword">return</span> targetObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝数组对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList  被拷贝数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass 拷贝类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">convertToTargetList</span><span class="params">(List&lt;?&gt; sourceList, Class&lt;T&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(sourceList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T&gt; targetList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object sourceObj : sourceList) &#123;</span><br><span class="line">            T targetObj = convertToTarget(sourceObj, targetClass);</span><br><span class="line">            targetList.add(targetObj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> targetList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝对象(性能++)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source  被拷贝数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 拷贝类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">T <span class="title">convert</span><span class="params">(S source, Class&lt;T&gt; dest, Function&lt;T, T&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T result = dest.newInstance();</span><br><span class="line">            <span class="keyword">final</span> BeanCopier copier = BeanCopier.create(source.getClass(), dest, <span class="keyword">false</span>);</span><br><span class="line">            copier.copy(source, result, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (function != <span class="keyword">null</span>) &#123;</span><br><span class="line">                function.apply(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝对象(性能++)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> copier 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function 功能校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">T <span class="title">convert</span><span class="params">(BeanCopier copier, S source, Class&lt;T&gt; dest, Function&lt;T, T&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T result = dest.newInstance();</span><br><span class="line">            copier.copy(source, result, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (function != <span class="keyword">null</span>) &#123;</span><br><span class="line">                function.apply(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝数组(性能++)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList 被拷贝数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function 功能校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标类型数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">List&lt;T&gt; <span class="title">convertList</span><span class="params">(List&lt;S&gt; sourceList, Class&lt;T&gt; dest, Function&lt;T, T&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(sourceList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;T&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">final</span> BeanCopier copier = BeanCopier.create(sourceList.get(<span class="number">0</span>).getClass(), dest, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (S source : sourceList) &#123;</span><br><span class="line">                T result = dest.newInstance();</span><br><span class="line">                copier.copy(source, result, <span class="keyword">null</span>);</span><br><span class="line">                resultList.add(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (function != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultList.forEach(function::apply);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">BeanCopier <span class="title">createCopier</span><span class="params">(Class&lt;S&gt; source, Class&lt;T&gt; dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BeanCopier.create(source, dest, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis加锁操作注解</title>
    <url>/2022/06/17/Redis%E5%8A%A0%E9%94%81%E6%93%8D%E4%BD%9C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisLock &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**redis 锁名 */</span></span><br><span class="line">    <span class="function">String <span class="title">lockName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**redis 锁持续时间 默认30min */</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lockTime</span><span class="params">()</span> <span class="keyword">default</span> 30 * 60 * 1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**redis 是否需要锁用户 */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">lockUser</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * redis锁</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(RedisLockAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(cn.avicnet.uap.common.redis.annotation.RedisLock)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisLock annotation = getAnnotation(joinPoint);</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="keyword">null</span> || StringUtils.isBlank(annotation.lockName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">&quot;请设置锁名！：&quot;</span> + joinPoint.getSignature());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取锁名</span></span><br><span class="line">        String lockName = annotation.lockName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否需要锁定用户</span></span><br><span class="line">        <span class="keyword">if</span> (annotation.lockUser()) &#123;</span><br><span class="line">            Long userId = AsyncSecurityUtils.getUserId() != <span class="keyword">null</span> ? AsyncSecurityUtils.getUserId() : <span class="keyword">this</span>.getUserId();</span><br><span class="line">            lockName = lockName + <span class="string">&quot;:&quot;</span> + userId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置失效时间</span></span><br><span class="line">        <span class="keyword">long</span> lockTime;</span><br><span class="line">        <span class="keyword">if</span> (annotation.lockTime() &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">            lockTime = <span class="number">30</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lockTime = annotation.lockTime();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String timeTags = String.valueOf(System.currentTimeMillis() + lockTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!redisService.lock(lockName, timeTags)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(<span class="string">&quot;已有用户正在操作！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//执行解锁</span></span><br><span class="line">                redisService.unlock(lockName, timeTags);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;redis 解锁失败&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从方法切入点获取注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 注解信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedisLock <span class="title">getAnnotation</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.getAnnotation(RedisLock.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ServletUtils.getRequest() == <span class="keyword">null</span> ? <span class="keyword">null</span> : Convert.toLong(ServletUtils.getRequest().getHeader(CacheConstants.DETAILS_USER_ID));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>关于上级领导通报最低工时这件事</title>
    <url>/2022/06/24/%E5%85%B3%E4%BA%8E%E4%B8%8A%E7%BA%A7%E9%A2%86%E5%AF%BC%E9%80%9A%E6%8A%A5%E6%9C%80%E4%BD%8E%E5%B7%A5%E6%97%B6%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2022/06/24/jFwwFJ.png" alt="jFwwFJ.png"></p>
<h2 id="事件前提"><a href="#事件前提" class="headerlink" title="事件前提"></a>事件前提</h2><p>今天周五准备下班的时候，发现领导把本月的工时和最短的两人发了出来，我一开始很震惊，我竟然平均工时最短（可能是因为月初在家隔离了一段时间，但这也不重要）。公司正常模式为早9晚6，入职时HR也跟我通知了会加班这件事，我觉得只要当天把自己本职工作完成就好，应该不会说其他什么事吧。</p>
<p>我看到消息后感觉有些好笑，其主要目的是为了让我加班 OR 杀鸡儆猴，让员工自己卷，加班费一毛都不用出，打算每天按最短工时打卡，晚上仔细考虑下对于现在这个问题不宜过度冲动，这种现象折射的，就是所谓的人口红利，背面隐藏的就是 爱干干 不干 gun，女生为啥常说没安全感呢， 这种风气下，人人自危，难怪千军万马考公务员</p>
<p>贷款了就永远给公司当🐶吧，自己活得快乐睁眼闭眼一辈子就过去了，家庭孩子啥的，不强求，来缘分了就上，没有就算了。人这一辈子累死累活，卷这卷那最后只不过沧海一粟</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件</title>
    <url>/2022/07/19/IDEA%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h2 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h2><p>阿里巴巴 Java 开发规约插件</p>
<h2 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h2><p>侧边缩略图</p>
<h2 id="GitToolBox"><a href="#GitToolBox" class="headerlink" title="GitToolBox"></a>GitToolBox</h2><p>点击的代码行之后显示 git 用户名，commit 等一些信息。</p>
<h2 id="Mario-Progress-Bar"><a href="#Mario-Progress-Bar" class="headerlink" title="Mario Progress Bar"></a>Mario Progress Bar</h2><p>NyanProgressBar</p>
<p>Mario加载条</p>
<h2 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h2><p>懂得都懂</p>
<h2 id="Pokemon-Progress"><a href="#Pokemon-Progress" class="headerlink" title="Pokémon Progress"></a>Pokémon Progress</h2><p>Pokémon加载条</p>
<h2 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h2><p>智能AI辅助。。。（我的评价是不如Copilot一根）</p>
<h2 id="RESTfulToolKit"><a href="#RESTfulToolKit" class="headerlink" title="RESTfulToolKit"></a>RESTfulToolKit</h2><p>1.根据 URL 直接跳转到对应的方法定义 ( Ctrl \ or Ctrl Alt N );</p>
<p>2.提供了一个 Services tree 的显示窗口;</p>
<p>3.一个简单的 http 请求工具;</p>
<p>4.在请求方法上添加了有用功能: 复制生成 URL;,复制方法参数…</p>
<p>5.其他功能: java 类上添加 Convert to JSON 功能，格式化 json 数据 ( Windows: Ctrl + Enter; Mac: Command + Enter )。</p>
<h2 id="SQL-Param-Setter"><a href="#SQL-Param-Setter" class="headerlink" title="SQL Param Setter"></a>SQL Param Setter</h2><p>A simple tool that helps you to extract a executable sql from mybatis logs like below:<br>    ==&gt; Preparing: select * from table where name = ?<br>    ==&gt; Parameters: Tom(String)</p>
<p>After selecting these two lines of logs above, you can right click your mouse and select “SQL Params Setter” in the popup menu, then the result executable sql, i.e. “select * from table where name = ‘Tom’” will be copied to your clipboard.</p>
<h2 id="Rainbow-brackets"><a href="#Rainbow-brackets" class="headerlink" title="Rainbow brackets"></a>Rainbow brackets</h2><p>它为每组左中括号和右中括号提供了各自的颜色，使跟踪代码块的起始和结束位置更加容易</p>
<h2 id="Extra-Icons"><a href="#Extra-Icons" class="headerlink" title="Extra Icons"></a>Extra Icons</h2><p>它增加了一组默认情况下 IntelliJ IDEA 不支持的图标。 这些图标不仅美观，还将简化文件之间的导航，因为您可以更直观地识别文件类型</p>
<h2 id="Activate-power-mode"><a href="#Activate-power-mode" class="headerlink" title="Activate-power-mode"></a>Activate-power-mode</h2>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>KINGYO</title>
    <url>/2022/06/29/KINGYO/</url>
    <content><![CDATA[<p>一开始就这样 接下来会如何？醒醒吧 别再蒙混过关了，上下颠倒的空档里。<br>无法避开的痛处 是在威胁我吗、<br>身无分文 虽然牛仔裤还没破 可是口袋里只有一把辛酸泪、</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>10KM跑步经验</title>
    <url>/2022/08/31/10KM%E8%B7%91%E6%AD%A5%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="大体重跑步伤膝盖吗？"><a href="#大体重跑步伤膝盖吗？" class="headerlink" title="大体重跑步伤膝盖吗？"></a>大体重跑步伤膝盖吗？</h2><p>只要你不是先天性的膝关节弯曲，或者半月板问题等等，正常是不会对膝盖造成多大损伤的。可以参考大多数马拉松运动员，很少出现严重的膝关节问题。很多业余马拉松爱好者，都是大体重入门，刷脂成功再进阶，他们都没有严重的膝伤问题，所以如果你想刷脂，想跑步，跑就完事了，不要整天操心伤不伤膝盖。如果你的 BMI 比我的低，放心，你跑起来应该也没问题。</p>
<p>如果你实在害怕，可以挂号看看运动康复科目之类的医生，检查下自己的关节是不是可以进行跑步。</p>
<h2 id="运动损伤自测"><a href="#运动损伤自测" class="headerlink" title="运动损伤自测"></a>运动损伤自测</h2><p>刚跑步肯定会出现各种不舒服，小腿酸痛，大腿酸痛，膝盖酸痛，踝关节酸痛，足底酸痛等等。只要不是静息疼痛，也就是坐着不动，躺着不动都疼，就说明不严重，继续跑就完事了。如果出现严重的静息疼痛，你真的需要去看医生。</p>
<p>我刚开始跑步，膝盖酸痛明显，我也是真的害怕，所以都打算放弃了。</p>
<p>但是我的膝盖不是静息疼痛，而是跑到 3-5km 的时候，开始疼痛的。</p>
<p>我开始找寻解决办法，索性我的身体还行，改变了跑姿，我从后掌跑法，切换到了前掌。（我不建议大家尝试，正常跑步什么姿势，就什么姿势），我的膝盖确实减轻了很多。</p>
<p>但是陆续出现了小腿严重酸痛，大腿酸痛，伤痛又一次让我想要放弃。</p>
<p>强忍着，进行了一次又一次 3KM ，5KM ，减轻了很多，到现在 10KM 也很轻松，酸痛感逐渐逐渐消失了。</p>
<h2 id="跑步需要热身和拉伸吗"><a href="#跑步需要热身和拉伸吗" class="headerlink" title="跑步需要热身和拉伸吗"></a>跑步需要热身和拉伸吗</h2><p>很需要，怎么拉伸和热身，建议去搜寻专业的视频。</p>
<p>当然，力量锻炼也很重要。不过如果，你没怎么跑过步，可能更不会去锻炼了</p>
<h2 id="跑步需要哪些装备"><a href="#跑步需要哪些装备" class="headerlink" title="跑步需要哪些装备"></a>跑步需要哪些装备</h2><p>如果你想要跑的快乐，跑步是需要装备的。</p>
<ul>
<li>一块手表，或者手环，有 GPS ，可以检测实时心率。</li>
<li>T 恤短裤，我只推荐 Nike dri fit adv ，在炎热的夏天，其他 T 恤出汗非常黏，adv 相对好一点。驮着几斤的衣服黏在身上，是真的很难受。</li>
<li>跑鞋，真的很重要！！！！如果你是入门跑者，不要考虑，线下你能买到的跑鞋，尤其是国产的碳板跑鞋，多半是竞速的，稳定性都很差。</li>
</ul>
<h2 id="如何进行-5KM-慢跑"><a href="#如何进行-5KM-慢跑" class="headerlink" title="如何进行 5KM 慢跑"></a>如何进行 5KM 慢跑</h2><p>如果你是小白，我相信你可能这辈子都没跑过 5KM 的距离。如何突破，有以下几点</p>
<ul>
<li>掌握呼吸节奏，比如 3 步呼吸法，就是每跑三步就呼吸一次，如果你发现喘不过来，就降速</li>
<li>适当走路，慢跑是个枯燥难熬的运动，并不是竞速，顶不住了，可以适当停下来走路缓缓</li>
<li>不断的练习跑步。跑步虽然说是人类的天性，但是不锻炼，很难突破</li>
<li>压好心率，慢跑不是竞速，把心率控制在自己能自由说话的区间，就算 8 分配也没关系</li>
</ul>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8的几个实用新特性</title>
    <url>/2022/08/20/Java8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%AE%9E%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="延迟队列-【Delay-Queue】"><a href="#延迟队列-【Delay-Queue】" class="headerlink" title="延迟队列 【Delay Queue】"></a>延迟队列 【Delay Queue】</h2><p><code>它是一种特定类型的 Java 集合，它允许我们根据元素的延迟时间对元素进行排序。老实说，这是一门非常有趣的课。尽管 DelayQueue该类是 Java 集合的成员，但它属于 java.util.concurrent 包。它实现了BlockingQueue接口。只有当元素的时间到期时，才能从队列中取出元素</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> record <span class="title">DelayedEvent</span><span class="params">(<span class="keyword">long</span> startTime, String msg)</span> implements Delayed </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> diff = startTime - System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> unit.convert(diff, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="keyword">this</span>.startTime - ((DelayedEvent) o).startTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>假设我们想推迟元素10秒。我们只需要设置当前时间增加了10秒DelayedEvent类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> DelayQueue&lt;DelayedEvent&gt; delayQueue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> timeFirst = System.currentTimeMillis() + <span class="number">10000</span>;</span><br><span class="line">delayQueue.offer(<span class="keyword">new</span> DelayedEvent(timeFirst, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">log.info(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">log.info(delayQueue.take().msg());</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>绿萝水培养殖方法</title>
    <url>/2022/09/02/%E7%BB%BF%E8%90%9D%E6%B0%B4%E5%9F%B9%E5%85%BB%E6%AE%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="家庭如何水培空气净化能手——绿萝"><a href="#家庭如何水培空气净化能手——绿萝" class="headerlink" title="家庭如何水培空气净化能手——绿萝"></a>家庭如何水培空气净化能手——绿萝</h2><p>它能清除一氧化碳、亚硫酸等室内有害气体，清新室内空气，拉丁学名为Epipremnum aureum。绿萝是常绿藤本植物，生长在热带雨林的岩石和树干上，它缠绕能力强，气根非常发达</p>
<h2 id="生长习性"><a href="#生长习性" class="headerlink" title="生长习性"></a>生长习性</h2><p>绿萝喜阴，忌阳光直射。在室内栽培时可放置在窗旁，我们需要注意当阳光过强时，绿萝叶面就会被灼伤，当然，完全没有阳光时，绿萝叶面会出现斑纹消失的现象，建议让绿萝接受4小时的散射光，这样可以完全满足绿萝生长发育的需要</p>
<h2 id="绿萝的水培方法"><a href="#绿萝的水培方法" class="headerlink" title="绿萝的水培方法"></a>绿萝的水培方法</h2><p>水培绿萝首先需选择绿萝带有根的枝茎作为水培对象，将其放入清水中，10天就能长出水生根，需要注意放入水中的枝茎部分不能带有叶片，因为叶片泡在水中很容易影响到水质。同时，也可以选取株型较好的盆栽绿萝植株，洗净根系上的泥土，剪去多余的老根，放入清水中</p>
<p>水培绿萝，刚开始要注意换水，2天换一次与室温相同的水，当绿萝的水生根长出1周后，就可以换1次水了。绿萝的新叶长出后，每隔10天加1次营养液，或者向叶片上喷洒稀释的营养液，使叶片翠绿有光泽</p>
<p>水培绿萝的根系要注意时常清洗修剪，为避免营养流失，水培绿萝根系过长时，应及时修剪。如果根系有腐烂发粘的现象，需及时对植株根系进行清洗，剪去烂根，并用高锰酸钾溶液浸泡消毒后再恢复养护。同时，采取与绿萝水培初期一样的方法，2天换1次水，待绿萝植株完全恢复长势后再10天换1次水</p>
<p>水培绿萝适合放置在有足够散射光的地方，适宜15—21℃温暖湿润的环境。在干燥的季节需要经常的往叶片上喷水，增加绿萝生长环境的湿度，起到清洁叶片表面，去除灰尘的作用。冬季水培绿萝注意防冻，因水培叶片娇嫩，对温度变化十分敏感，请注意，不要将水培绿萝靠近暖气，冬季保持室温在10℃以上。 </p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>运动燃脂</title>
    <url>/2022/09/05/%E8%BF%90%E5%8A%A8%E7%87%83%E8%84%82/</url>
    <content><![CDATA[<h2 id="运动燃脂"><a href="#运动燃脂" class="headerlink" title="运动燃脂"></a>运动燃脂</h2><p>增加耐力训练。研究表明，与传统运动相比，间歇性锻炼或者交替进行短暂的爆发与休息可以改善肌肉并增强耐力</p>
<p>燃烧卡路里。有氧运动能够提高心率，加快燃烧卡路里，有益于全身减脂。只去做某项腹部运动来减掉肚子上的赘肉是不可能的，但是当你做全身有氧运动时，最先消耗的就是腹部的脂肪。</p>
<ul>
<li>记录运动的时间。记录跑1000米需要多长时间。随着耐力的增加，你花费的时间会越来越少。</li>
<li>克服跑步时的小腿疼痛问题。如果你在跑步时小腿前侧有疼痛症状，那么可能是由于身体过于前倾造成的。（也就是说，你在落脚时把重心过多地放在了脚的的外侧）选择专业运动鞋可以帮你减轻疼痛。</li>
<li>不要过量运动。刚开始做有氧运动时，请每周做3次就可以了。当你慢慢习惯时，可以增加到每周4次。过多的有氧运动会导致肌肉的流失，还容易造成肌肉损伤。</li>
</ul>
<p>增加阻力训练。2006年《国际体育营养与运动代谢杂志》上发表的一项研究表明，在腹部减脂方面，心血管（有氧）运动与阻力训练相结合比单独进行心血管运动更为有效。你可以通过力量训练器、健身器或阻力带来进行阻力训练，训练时让身体保持不稳定的姿势也很有用，因为这样会进一步提高肌肉的运动强度。</p>
<p>别再做仰卧起坐——至少暂时不要做。仰卧起坐的作用是增加肌肉，但是在增加肌肉前，你先需要减去腹部的脂肪。其实，仰卧起坐增加了大块肌肉，反而会让你的肚子看起来更大。</p>
<h2 id="保证正常的新陈代谢"><a href="#保证正常的新陈代谢" class="headerlink" title="保证正常的新陈代谢"></a>保证正常的新陈代谢</h2><p>减轻压力。科学研究表明皮质醇（一种人们在面临压力时分泌的荷尔蒙）会导致肚子上的赘肉增加</p>
<ul>
<li>正常的成年人需要每天至少7小时以上的睡眠来保证身体各项功能正常运转。</li>
<li>制定放松时间。哪怕仅仅是午饭后放松15分钟，闭上眼睛深呼吸一下，试着不去想那些生活琐事，也是有帮助的。</li>
<li>使压力远离睡眠环境。如果可能的话，不要在卧室里工作，或是做任何让你感到有压力的事。在你进入卧室时，告诉自己，我不会在去想那些烦心事。</li>
</ul>
<p>每天走10,000步。在一项研究中表明，如果你每天走路少于1,500步（而不改变饮食习惯的话），那么2星期后腹部脂肪就会增加7%。</p>
<ul>
<li>在合理的距离内尽量选择步行。如果可能，选择走路去上班、上学或购物。</li>
<li>尽量不使用电梯而爬楼梯。尽量不开车来选择步行。</li>
<li>每30分钟起来走动一下。如果你工作时总是坐着，那么买一些可以在室内运动的器械。</li>
</ul>
<p>补充足够的水。科学研究表明摄入足够的水能够加快新陈代谢。喝水还能帮助身体排出毒素，对身体有益。</p>
<ul>
<li>每天至少喝8杯水</li>
<li>随身带一个水壶，一旦渴了就喝水。</li>
<li>判断饮水是否足够的方法就是看一下检查一下小便的颜色。如果呈黄色的话意味着你还需要喝更多的水，直到尿色比较淡为止。</li>
<li>大幅减少酒精、含糖饮料（如甜茶、酷爱、果汁饮料、果汁、可乐、七喜和百事可乐）以及碳酸饮料的摄入。</li>
</ul>
<p>保证按时吃早餐。你可能会觉得，我要减肥的话，为什么还要吃呢？但是科学研究表明，在起床后1小时内吃早餐，能够保持胰岛素的稳定，并降低LDL-胆固醇（俗称坏胆固醇）的含量。</p>
<h2 id="准备健康早餐"><a href="#准备健康早餐" class="headerlink" title="准备健康早餐"></a>准备健康早餐</h2><ul>
<li>选择一种蛋白质：鸡蛋、豆类、花生酱、坚果、瘦肉</li>
<li>选择一种纤维：燕麦、新鲜水果、绿叶蔬菜</li>
<li>尽量减少精制糖：避开含糖的谷物、煎饼、糕点、速食燕麦片</li>
<li>小提示：燕麦和其它高纤维碳水化合物有助于保持健康的血糖水平，让减肥更容易。</li>
</ul>
<h3 id="节食减脂"><a href="#节食减脂" class="headerlink" title="节食减脂"></a>节食减脂</h3><p>减少卡路里的摄入。只有减少卡路里的摄入才能减少腹部的赘肉。</p>
<ul>
<li>每减少半斤脂肪需要消耗3700卡热量。因此要想减脂，你必须通过运动燃烧掉3700卡，或是每周少摄入3700卡的热量。</li>
<li>每周最多减掉一斤。减肥速度过快不但对身体无益，还会导致反弹。</li>
<li>记下每天吃了什么。人们经常低估自己所摄入的食物的量。试着记录下一周所吃的所有东西，并利用网上的卡路里热量表，查一查自己大概摄入了多少热量，是不是需要适当节食。</li>
<li>男士试着每天摄入2200卡，女士则尝试控制在2000卡。这会帮你每周减掉半斤到一斤的体重。当然，减重的多少和你的运动量也有关系。</li>
<li>每天的消耗不能少于1200卡。</li>
</ul>
<p>摄入健康脂肪。研究表明，摄入单不饱和脂肪酸（MUFAs)——比如鳄梨、坚果、种子、豆类和黑巧克力能够防止腹部脂肪的堆积。<br>反式脂肪酸（果酱、饼干、甜点以及其他任何用氢化油制作的食物）会导致腹部脂肪的堆积。所以请尽量远离它们。</p>
<p>在饮食中摄入更多膳食纤维。可溶性膳食纤维（富含于苹果、燕麦、樱桃等）可以降低胰岛素水平，加速燃烧内脏中的脂肪。</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>自然改善视力</title>
    <url>/2022/09/06/%E8%87%AA%E7%84%B6%E6%94%B9%E5%96%84%E8%A7%86%E5%8A%9B/</url>
    <content><![CDATA[<p>练习慢速和快速眨眼，帮助减轻眼睛疲劳。眨眼让眼睛短暂休息，并滋润眼睛，避免它们变干。抽出2分钟，每30秒眨一次眼，眼睛一定要完全闭上再张开。缓慢眨眼后，再次抽出2分钟，这次每4秒眨一次眼。一整天不时重复上述步骤，训练眼睛多眨眼</p>
<p>用眼睛画8字，增强眼部肌肉</p>
<p>交替注视大拇指和远方的某个物体，以改善视力</p>
<p>用手掌捂住双眼5秒，让眼睛放松。这个方法有助于放松疲劳的双眼。双掌互相揉搓5-10秒，让它们变得温暖，然后轻轻地捂住紧闭的双眼。捂1分钟，保持深呼吸。每天重复2-3次，帮助缓解眼睛疲劳</p>
<h2 id="调整饮食"><a href="#调整饮食" class="headerlink" title="调整饮食"></a>调整饮食</h2><p>多吃深绿叶蔬菜，摄取维生素A。新鲜的绿叶蔬菜富含维生素A和叶黄素。叶黄素是一种抗氧化剂，有助于促进眼睛健康。将羽衣甘蓝、菠菜、西兰花和甘蓝菜叶等蔬菜纳入饮食中，每周至少吃3-4次，改善眼睛健康</p>
<p>吃柑橘类水果和其它维生素C来源。维生素C有助于降低罹患白内障的风险，同时促进眼部血液循环。将橙、葡萄柚、番茄、苹果等蔬果纳入饮食中，建议每天摄取75-90毫克维生素C。</p>
<p>吃富含脂肪酸和维生素D的食物，缓解眼睛干涩。欧米茄-3脂肪酸和维生素D有助于对抗视网膜黄斑变性，避免日后失明。每周吃三文鱼、鱼、核桃、亚麻籽、奇亚籽等食物3-4次，确保饮食均衡</p>
<h2 id="改变生活方式"><a href="#改变生活方式" class="headerlink" title="改变生活方式"></a>改变生活方式</h2><p>视线偶尔离开电视或电脑屏幕，让眼睛休息一下。长时间盯着电脑和电视屏幕，它们释放的蓝光会让眼睛感觉疲劳和干涩。如果你对着电脑工作，尽量每小时休息10分钟，让视线离开屏幕</p>
<p>在强光下戴墨镜，减轻眼睛疲劳。阳光会损伤眼睛，可能导致失明，并使眼睛慢慢变弱。外出时，如果阳光很强，不妨戴上墨镜。不管去哪里都随身携带墨镜，以便随时派上用场。如果你需要更多保护，选择可同时保护眼睛两侧的环绕包裹式墨镜</p>
<p>不要抽烟，避免眼睛损伤。抽烟会引起许多视力相关问题，比如视网膜黄斑变性、白内障和眼睛神经损伤。如果你没有抽烟，那就不要碰任何烟草产品。如果你有抽烟，减少每天的抽烟数量，慢慢把它彻底戒掉。</p>
<p>获取充足睡眠，好让眼睛休息。晚上没有获取充分休息，眼睛一整天都会酸痛、干涩。每晚至少睡6-8小时，让眼睛有时间放松和恢复。睡前至少30-60分钟停止看任何电子屏幕，否则你会更难入睡</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>让我倍感煎熬的9.29</title>
    <url>/2022/09/29/%E8%AE%A9%E6%88%91%E5%80%8D%E6%84%9F%E7%85%8E%E7%86%AC%E7%9A%849.29/</url>
    <content><![CDATA[<p>今天我才深刻的意识到自己是多么的无能，多么的渺小，像一只蜷缩在下水道又油又臭的老鼠，终日不见阳光,看不到美丽的天空,闻不到鲜花的芬芳,终日在臭水沟里与那些可恶的老鼠们争抢那点可怜的食物,什么是什么?什么是什么?什么是什么?我不明白,从我离开象牙塔的那天起我就掉进了下水道里,再也没有爬出来过．</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>冬虫夏草</title>
    <url>/2022/10/14/%E5%86%AC%E8%99%AB%E5%A4%8F%E8%8D%89%E7%9A%84%E6%95%85%E4%BA%8B/</url>
    <content><![CDATA[<p>我最近看到一句话，是俞敏洪老师说的，说如果没有女性和家庭，男人可能不在乎自己有没有钱，我觉得这句话说的真的太准确。看到这句话，我最先想到了父辈这一代人，就拿我父亲来说，其实这么多年回过头去看，我觉得他存在的价值就是一个家庭的供养机器，机器喜欢什么没有人知道，反正做好饭，桌子上摆啥，他吃啥，我们爱给他买什么，他穿什么，就算去外边玩，也很少有人征求他的意见，我们自己商量好就行了。这样的家庭定位和家庭地位适用于大部分男性，这也正是主流文明成功的秘诀，就是通过婚姻、家庭、后代捆绑男性，使男性从自由自在的不安稳因素变成可预测可掌握的社会劳动力。很多人觉得男人过了 35 岁或者 40 岁就开始认命了，不怎么折腾了，开始变得沉默，变得冷漠，开始循规蹈矩的工作生活了。但是其实这不叫认命，这叫黑化，就过了 35 岁以后，越来越多的男人开始不抽烟、不喝酒，不玩游戏，甚至连饭都会在公司吃，没有穿着要求，也没有特别的爱好。</p>
<p>生活成本接近于零，整个世界就是工作挣钱，存钱养家，带孩子玩，如果真的能一直做一个糊涂的工具人也很好，就是做一个父母的好儿子，老婆的好丈夫，孩子的好爸爸，领导的好下属。但偏偏大部分男人心里其实都是不糊涂的，他们知道没有人真正会在意一个中年男人到底需求什么，周围的家人貌似都很爱你，但是仔细一想，全部都是基于需求，你如果顺风顺水，那么万事达，一旦丧失劳动力家庭地位，分分钟还不如一条狗，毕竟狗还能卖萌讨主人开心。明白了这一点之后，世界会越来越真实，自己也会越来越沉默。如果你是女性，听到这里千万不要跑回去体贴的问你丈夫到底喜欢什么，最好别问，问了会很容易让他破房，关键是他破房以后没地方哭。男人的这种黑话是不可逆的，一瞬间他就会理解很多以前不理解的人和事。男人被需求我觉得是正常的，努力挣钱存钱也是对的，但其实对于大部分普通的中年男人来说，这辈子都挣不到足够东的。</p>
<p>钱，因为你挣钱的速度永远赶不上这个社会的要求，或者说你整个家庭的需求，遇到极端情况甚至会出现生存问题。但是不要因此怀疑自己的能力，挣不到足够多的钱并不完全是能力问题，这背后的真正原因是不能明说的。你可以想一下啊，如果说让你挣到足够多的钱，那谁来拉车呢？就是有部分人他是在制度之外的，专门搞制度设计，做极限施压的。男人的累正是因为一边要接受这种不成正比的付出和回报，另一方面还要努力去满足来自周围的需求，最关键的是自身并不能得到足够的理解。其实很多男人在结婚的那一刻就已经死了，后面的人生只不过是冬虫夏草里面的那只虫而已。</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的超市成本管理系统</title>
    <url>/2022/10/15/%E5%9F%BA%E4%BA%8ESpringBoot%E7%9A%84%E8%B6%85%E5%B8%82%E6%88%90%E6%9C%AC%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的超市成本管理系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios</p>
<p>管理员：系统登录，修改密码，系统定制，数据统计（七天内订单，入库，出库信息统计），订单类型统计，售出统计，供应商准入管理，订单管理，出库记录（查看出库详情，导出出库单），入库记录（查看入库详情，导出入库单）</p>
<p>员工管理（修改员工详细信息），员工薪资涨幅（员工涨幅统计），员工薪资发放记录，库房管理，盘库统计，物品出入库详情</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>system<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://imgtu.com/i/OIVagf"><img src="https://s1.ax1x.com/2022/10/15/x0qSRe.jpg" alt="OIVagf.png"></a></td>
<td><a href="https://imgtu.com/i/OIVBDg"><img src="https://s1.ax1x.com/2022/10/15/x0bXa6.jpg" alt="OIVBDg.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVDbQ"><img src="https://s1.ax1x.com/2022/10/15/x0bxPO.jpg" alt="OIVDbQ.png"></a></td>
<td><a href="https://imgtu.com/i/OIV0KS"><img src="https://s1.ax1x.com/2022/10/15/x0bjIK.jpg" alt="OIV0KS.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVdv8"><img src="https://s1.ax1x.com/2022/10/15/x0bzGD.jpg" alt="OIVdv8.png"></a></td>
<td><a href="https://imgtu.com/i/OIVgCq"><img src="https://s1.ax1x.com/2022/10/15/x0qPsA.jpg" alt="OIVgCq.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIV5b4"><img src="https://s1.ax1x.com/2022/10/15/x0qCMd.jpg" alt="OIV5b4.png"></a></td>
<td><a href="https://imgtu.com/i/OIVsEj"><img src="https://s1.ax1x.com/2022/05/17/OIVsEj.png" alt="OIVsEj.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVyUs"><img src="https://s1.ax1x.com/2022/10/15/x0qiqI.jpg" alt="OIVyUs.png"></a></td>
<td><a href="https://imgtu.com/i/OIV65n"><img src="https://s1.ax1x.com/2022/10/15/x0qkZt.jpg" alt="OIV65n.png"></a></td>
</tr>
</tbody></table>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1Kg411a7jT/">项目视频：基于SpringBoot的超市成本管理系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#x66;&#97;&#110;&#49;&#107;&#x65;&#50;&#x6b;&#101;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x66;&#97;&#110;&#49;&#107;&#x65;&#50;&#x6b;&#101;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional使用</title>
    <url>/2022/10/21/Optional%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>利用Java8的新特性 Optional来尽量简化代码同时高效处理NPE</p>
<h3 id="使用Optional"><a href="#使用Optional" class="headerlink" title="使用Optional"></a>使用Optional</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回person对象，如果为空返回信息</span></span><br><span class="line">Person person=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">return</span> Optional.ofNullable(person).orElse(<span class="string">&quot;person为null&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="创建Optional对象"><a href="#创建Optional对象" class="headerlink" title="创建Optional对象"></a>创建Optional对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建一个包装对象值为空的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; optEmpty = Optional.empty();</span><br><span class="line"><span class="comment">// 2、创建包装对象值非空的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; optOf = Optional.of(<span class="string">&quot;optional&quot;</span>);</span><br><span class="line"><span class="comment">// 3、创建包装对象值允许为空也可以不为空的Optional对象</span></span><br><span class="line">Optional&lt;String&gt; optOfNullable1 = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">Optional&lt;String&gt; optOfNullable2 = Optional.ofNullable(<span class="string">&quot;optional&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Optional-get-方法-返回对象的值"><a href="#Optional-get-方法-返回对象的值" class="headerlink" title="Optional.get()方法(返回对象的值)"></a>Optional.get()方法(返回对象的值)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;No value present&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Optional.ofNullable(person).get();</span><br></pre></td></tr></table></figure>
<h3 id="Optional-isPresent-方法-判读是否为空"><a href="#Optional-isPresent-方法-判读是否为空" class="headerlink" title="Optional.isPresent()方法(判读是否为空)"></a>Optional.isPresent()方法(判读是否为空)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Optional.ofNullable(person).isPresent())&#123;</span><br><span class="line">    <span class="comment">//写不为空的逻辑</span></span><br><span class="line">    System.out.println(<span class="string">&quot;不为空&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//写为空的逻辑</span></span><br><span class="line">    System.out.println(<span class="string">&quot;为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Optional-ifPresent-方法-判读是否为空并返回函数"><a href="#Optional-ifPresent-方法-判读是否为空并返回函数" class="headerlink" title="Optional.ifPresent()方法(判读是否为空并返回函数)"></a>Optional.ifPresent()方法(判读是否为空并返回函数)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果对象非空，则运行函数体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果value不为空，则运行accept方法体</span></span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Optional.ofNullable(person).ifPresent(p -&gt; System.out.println(<span class="string">&quot;年龄&quot;</span>+p.getAge()));</span><br></pre></td></tr></table></figure>

<h3 id="Optional-filter-方法-过滤对象"><a href="#Optional-filter-方法-过滤对象" class="headerlink" title="Optional.filter()方法(过滤对象)"></a>Optional.filter()方法(过滤对象)</h3><p>filter()方法大致意思是，接受一个对象，然后对他进行条件过滤，如果条件符合则返回Optional对象本身，如果不符合则返回空Optional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.ofNullable(person).filter(p -&gt; p.getAge()&gt;<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Optional-map-方法-对象进行二次包装"><a href="#Optional-map-方法-对象进行二次包装" class="headerlink" title="Optional.map()方法(对象进行二次包装)"></a>Optional.map()方法(对象进行二次包装)</h3><p>map()方法将对应Funcation函数式接口中的对象，进行二次运算，封装成新的对象然后返回在Optional中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String optName = Optional.ofNullable(person).map(p -&gt; person.getName()).orElse(<span class="string">&quot;name为空&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Optional-orElse-方法-为空返回对象"><a href="#Optional-orElse-方法-为空返回对象" class="headerlink" title="Optional.orElse()方法(为空返回对象)"></a>Optional.orElse()方法(为空返回对象)</h3><p>如果包装对象为空的话，就执行orElse方法里的value，如果非空，则返回写入对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElse</span><span class="params">(T other)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果非空，返回value，如果为空，返回other</span></span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Optional-orElseGet-方法-为空返回Supplier对象"><a href="#Optional-orElseGet-方法-为空返回Supplier对象" class="headerlink" title="Optional.orElseGet()方法(为空返回Supplier对象)"></a>Optional.orElseGet()方法(为空返回Supplier对象)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Optional&lt;Supplier&lt;Person&gt;&gt; sup=Optional.ofNullable(Person::<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">//调用get()方法，此时才会调用对象的构造方法，即获得到真正对象</span></span><br><span class="line">Optional.ofNullable(person).orElseGet(sup.get());</span><br></pre></td></tr></table></figure>

<h3 id="Optional-orElseThrow-方法-为空返回异常"><a href="#Optional-orElseThrow-方法-为空返回异常" class="headerlink" title="Optional.orElseThrow()方法(为空返回异常)"></a>Optional.orElseThrow()方法(为空返回异常)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.ofNullable(member).orElseThrow(() -&gt; <span class="keyword">new</span> ServiceException(<span class="string">&quot;没有查询的相关数据&quot;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实战场景再现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询一个对象</span></span><br><span class="line">Member member = memberService.selectByIdNo(request.getCertificateNo());</span><br><span class="line"><span class="comment">//使用ofNullable加orElseThrow做判断和操作</span></span><br><span class="line">Optional.ofNullable(member).orElseThrow(() -&gt; <span class="keyword">new</span> ServiceException(<span class="string">&quot;没有查询的相关数据&quot;</span>));</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="function">Optional&lt;Location&gt; <span class="title">findLocationById</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Vue实现微信扫码支付、退款功能</title>
    <url>/2022/10/20/SpringBoot+Vue%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E9%80%80%E6%AC%BE/</url>
    <content><![CDATA[<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wxpay<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wxpay-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><h3 id="在配置类添加申请的商家号信息"><a href="#在配置类添加申请的商家号信息" class="headerlink" title="在配置类添加申请的商家号信息"></a>在配置类添加申请的商家号信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#关联的公众号appid</span><br><span class="line">weixin.pay.appid=wxXXXXXXX</span><br><span class="line">#商户号</span><br><span class="line">weixin.pay.partner=XXXXXXXXX</span><br><span class="line">#商户key</span><br><span class="line">weixin.pay.partnerkey=XXXXXXXXXX</span><br></pre></td></tr></table></figure>

<h3 id="添加微信生成二维码service"><a href="#添加微信生成二维码service" class="headerlink" title="添加微信生成二维码service"></a>添加微信生成二维码service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeiXinServiceImpl</span> <span class="keyword">implements</span> <span class="title">WeiXinService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentInfoService paymentInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeiXinService weiXinService;</span><br><span class="line">    <span class="comment">//生成支付的二维码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">createNative</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//支付记录表添加数据</span></span><br><span class="line">        <span class="comment">//根据单号查询订单相关信息</span></span><br><span class="line">        OrderInfo orderInfo = orderInfoService.getById(orderId);</span><br><span class="line">        <span class="keyword">if</span> (orderInfo == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OrderException(<span class="number">20001</span>,<span class="string">&quot;订单不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加订单状态</span></span><br><span class="line">        paymentInfoService.savePaymentInfo(orderInfo,PaymentTypeEnum.WEIXIN.getStatus());</span><br><span class="line">        <span class="comment">//调用微信接口返回二维码</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2 调用微信接口，得到二维码地址等信息</span></span><br><span class="line">            <span class="comment">//封装传递微信地址参数</span></span><br><span class="line">            Map paramMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            paramMap.put(<span class="string">&quot;appid&quot;</span>, ConstantPropertiesUtils.APPID); <span class="comment">//公众号id</span></span><br><span class="line">            paramMap.put(<span class="string">&quot;mch_id&quot;</span>, ConstantPropertiesUtils.PARTNER); <span class="comment">//商户号</span></span><br><span class="line">            paramMap.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr()); <span class="comment">//随机字符串，调用工具类</span></span><br><span class="line"> </span><br><span class="line">            Date reserveDate = orderInfo.getReserveDate();</span><br><span class="line">            String reserveDateString = <span class="keyword">new</span> DateTime(reserveDate).toString(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">            String body = reserveDateString + <span class="string">&quot;就诊&quot;</span>+ orderInfo.getDepname();</span><br><span class="line">            paramMap.put(<span class="string">&quot;body&quot;</span>, body);<span class="comment">//扫码后手机显示内容</span></span><br><span class="line"> </span><br><span class="line">            paramMap.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOutTradeNo()); <span class="comment">//订单流水号</span></span><br><span class="line">            <span class="comment">//paramMap.put(&quot;total_fee&quot;, order.getAmount().multiply(new BigDecimal(&quot;100&quot;)).longValue()+&quot;&quot;);</span></span><br><span class="line">            paramMap.put(<span class="string">&quot;total_fee&quot;</span>, <span class="string">&quot;1&quot;</span>);<span class="comment">//TODO 为了测试  支付金额</span></span><br><span class="line">            paramMap.put(<span class="string">&quot;spbill_create_ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);  <span class="comment">//终端ip</span></span><br><span class="line">            paramMap.put(<span class="string">&quot;notify_url&quot;</span>, <span class="string">&quot;http://xxxxxxxxx&quot;</span>);<span class="comment">//回调地址</span></span><br><span class="line">            paramMap.put(<span class="string">&quot;trade_type&quot;</span>, <span class="string">&quot;NATIVE&quot;</span>); <span class="comment">//二维码类型</span></span><br><span class="line">            <span class="comment">//请求微信生成二维码接口</span></span><br><span class="line">            HttpClient client = <span class="keyword">new</span> HttpClient(<span class="string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>);</span><br><span class="line">            <span class="comment">//设置post请求相关参数</span></span><br><span class="line">            <span class="comment">//微信支付要求传递参数xml格式</span></span><br><span class="line">            <span class="comment">//把封装map集合变成xml，加密处理，传输</span></span><br><span class="line">            String xml = WXPayUtil.generateSignedXml(paramMap, ConstantPropertiesUtils.PARTNERKEY);</span><br><span class="line">            client.setXmlParam(xml);</span><br><span class="line">            <span class="comment">//支持https协议</span></span><br><span class="line">            client.setHttps(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            client.post();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//调用微信接口，返回数据,xml格式的数据</span></span><br><span class="line">            String resultXml = client.getContent();</span><br><span class="line">            System.out.println(<span class="string">&quot;微信二维码：&quot;</span>+resultXml);</span><br><span class="line">            <span class="comment">//把xml格式数据转换map</span></span><br><span class="line">            Map&lt;String, String&gt; resultMap = WXPayUtil.xmlToMap(resultXml);</span><br><span class="line"> </span><br><span class="line">            Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;orderId&quot;</span>, orderId);</span><br><span class="line">            map.put(<span class="string">&quot;totalFee&quot;</span>, orderInfo.getAmount());</span><br><span class="line">            map.put(<span class="string">&quot;resultCode&quot;</span>, resultMap.get(<span class="string">&quot;result_code&quot;</span>));</span><br><span class="line">            map.put(<span class="string">&quot;codeUrl&quot;</span>, resultMap.get(<span class="string">&quot;code_url&quot;</span>));  <span class="comment">//微信二维码地址</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> orderException(<span class="number">20001</span>,<span class="string">&quot;生成二维码失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order/weixin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WeiXinService weixinPayService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单 生成二维码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/createNative/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">createNative</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@ApiParam(name = &quot;orderId&quot;, value = &quot;订单id&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> </span>&#123;</span><br><span class="line">        Map map = weixinPayService.createNative(orderId);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端微信支付二维码，wx-js定义方法"><a href="#前端微信支付二维码，wx-js定义方法" class="headerlink" title="前端微信支付二维码，wx.js定义方法"></a>前端微信支付二维码，wx.js定义方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">createNative</span>(<span class="params">orderId</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> request(&#123;</span><br><span class="line"> <span class="attr">url</span>: <span class="string">`/api/order/weixin/createNative/<span class="subst">$&#123;orderId&#125;</span>`</span>,</span><br><span class="line"> <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">安装npm install vue-qriously</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> weixinApi <span class="keyword">from</span> <span class="string">&#x27;@/api/yygh/wx&#x27;</span></span><br><span class="line"> </span><br><span class="line">    &lt;!-- 微信支付弹出框 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogPayVisible&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: left&quot;</span> <span class="attr">:append-to-body</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> @<span class="attr">close</span>=<span class="string">&quot;closeDialog&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;operate-view&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 350px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper wechat&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">qriously</span> <span class="attr">:value</span>=<span class="string">&quot;payObj.codeUrl&quot;</span> <span class="attr">:size</span>=<span class="string">&quot;220&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;line-height: 25px;margin-bottom: 40px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                请使用微信扫一扫<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                扫描二维码支付</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成二维码</span></span><br><span class="line">    <span class="function"><span class="title">pay</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">//弹框</span></span><br><span class="line">      <span class="built_in">this</span>.dialogPayVisible = <span class="literal">true</span></span><br><span class="line">      <span class="comment">//调用接口</span></span><br><span class="line">      weixinApi.createNative(<span class="built_in">this</span>.orderId).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.payObj = response.data</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.payObj.codeUrl == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">          <span class="built_in">this</span>.dialogPayVisible = <span class="literal">false</span></span><br><span class="line">          <span class="built_in">this</span>.$message.error(<span class="string">&quot;支付错误&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//每隔3秒查询一次支付状态</span></span><br><span class="line">          <span class="built_in">this</span>.timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.queryPayStatus(<span class="built_in">this</span>.orderId)</span><br><span class="line">          &#125;,<span class="number">3000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="查询订单支付状态，添加定时器方法，每隔3秒去查询一次支付状态"><a href="#查询订单支付状态，添加定时器方法，每隔3秒去查询一次支付状态" class="headerlink" title="查询订单支付状态，添加定时器方法，每隔3秒去查询一次支付状态"></a>查询订单支付状态，添加定时器方法，每隔3秒去查询一次支付状态</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">queryPayStatus</span>(<span class="params">orderId</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> request(&#123;</span><br><span class="line"> <span class="attr">url</span>: <span class="string">`/api/order/weixin/queryPayStatus/<span class="subst">$&#123;orderId&#125;</span>`</span>,</span><br><span class="line"> <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line"> &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="封装信息请求微信提供的接口，判断是否支付成功"><a href="#封装信息请求微信提供的接口，判断是否支付成功" class="headerlink" title="封装信息请求微信提供的接口，判断是否支付成功"></a>封装信息请求微信提供的接口，判断是否支付成功</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">queryPayStatus</span><span class="params">(Long orderId, String paymentType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 根据orderId查询订单信息</span></span><br><span class="line">    OrderInfo orderInfo = orderInfoService.getById(orderId);</span><br><span class="line">    <span class="keyword">if</span>(orderInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> orderException(<span class="number">20001</span>,<span class="string">&quot;订单不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//2 封装微信接口需要数据</span></span><br><span class="line">        Map paramMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        paramMap.put(<span class="string">&quot;appid&quot;</span>, ConstantPropertiesUtils.APPID);</span><br><span class="line">        paramMap.put(<span class="string">&quot;mch_id&quot;</span>, ConstantPropertiesUtils.PARTNER);</span><br><span class="line">        paramMap.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOutTradeNo());</span><br><span class="line">        paramMap.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 调用微信接口，传递数据，设置参数</span></span><br><span class="line">        HttpClient client = <span class="keyword">new</span> HttpClient(<span class="string">&quot;https://api.mch.weixin.qq.com/pay/orderquery&quot;</span>);</span><br><span class="line">        client.setXmlParam(WXPayUtil.generateSignedXml(paramMap,ConstantPropertiesUtils.PARTNERKEY));</span><br><span class="line">        client.setHttps(<span class="keyword">true</span>);</span><br><span class="line">        client.post();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 获取微信接口返回数据</span></span><br><span class="line">        String xml = client.getContent();</span><br><span class="line">        System.out.println(<span class="string">&quot;支付状态返回xml: &quot;</span>+xml);</span><br><span class="line">        Map&lt;String, String&gt; resultMap = WXPayUtil.xmlToMap(xml);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> orderException(<span class="number">20001</span>,<span class="string">&quot;查询失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询状态"><a href="#查询状态" class="headerlink" title="查询状态"></a>查询状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;查询支付状态&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/queryPayStatus/&#123;orderId&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">queryPayStatus</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@ApiParam(name = &quot;orderId&quot;, value = &quot;订单id&quot;, required = true)</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用查询接口</span></span><br><span class="line">    Map&lt;String, String&gt; resultMap = weixinPayService.queryPayStatus(orderId, PaymentTypeEnum.WEIXIN.name());</span><br><span class="line">    <span class="keyword">if</span> (resultMap == <span class="keyword">null</span>) &#123;<span class="comment">//出错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail().message(<span class="string">&quot;支付出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;SUCCESS&quot;</span>.equals(resultMap.get(<span class="string">&quot;trade_state&quot;</span>))) &#123;<span class="comment">//如果成功</span></span><br><span class="line">        <span class="comment">//更改订单状态，处理支付结果</span></span><br><span class="line">        String out_trade_no = resultMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        paymentInfoService.paySuccess(out_trade_no, PaymentTypeEnum.WEIXIN.getStatus(), resultMap);</span><br><span class="line">        <span class="keyword">return</span> Result.ok().message(<span class="string">&quot;支付成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok().message(<span class="string">&quot;支付中&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">weixin.cert=C:\\apiclient_cert.p12</span><br><span class="line"></span><br><span class="line"><span class="comment">//退款</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">refund</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 根据订单号查询订单支付记录信息</span></span><br><span class="line">    QueryWrapper&lt;PaymentInfo&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;order_id&quot;</span>,orderId);</span><br><span class="line">    PaymentInfo paymentInfo = paymentInfoService.getOne(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 TODO 添加退款信息到退款表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//3 调用微信退款接口</span></span><br><span class="line">        <span class="comment">//封装微信接口需要数据</span></span><br><span class="line">        Map&lt;String,String&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        paramMap.put(<span class="string">&quot;appid&quot;</span>,ConstantPropertiesUtils.APPID);       <span class="comment">//公众账号ID</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;mch_id&quot;</span>,ConstantPropertiesUtils.PARTNER);   <span class="comment">//商户编号</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;nonce_str&quot;</span>,WXPayUtil.generateNonceStr());</span><br><span class="line">        paramMap.put(<span class="string">&quot;transaction_id&quot;</span>,paymentInfo.getTradeNo()); <span class="comment">//微信订单号</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;out_trade_no&quot;</span>,paymentInfo.getOutTradeNo()); <span class="comment">//商户订单编号</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;out_refund_no&quot;</span>,<span class="string">&quot;tk&quot;</span>+paymentInfo.getOutTradeNo()); <span class="comment">//商户退款单号</span></span><br><span class="line">        <span class="comment">//       paramMap.put(&quot;total_fee&quot;,paymentInfoQuery.getTotalAmount().multiply(new BigDecimal(&quot;100&quot;)).longValue()+&quot;&quot;);</span></span><br><span class="line">        <span class="comment">//       paramMap.put(&quot;refund_fee&quot;,paymentInfoQuery.getTotalAmount().multiply(new BigDecimal(&quot;100&quot;)).longValue()+&quot;&quot;);</span></span><br><span class="line">        paramMap.put(<span class="string">&quot;total_fee&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        paramMap.put(<span class="string">&quot;refund_fee&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置接口和参数</span></span><br><span class="line">        HttpClient client = <span class="keyword">new</span> HttpClient(<span class="string">&quot;https://api.mch.weixin.qq.com/secapi/pay/refund&quot;</span>);</span><br><span class="line">        client.setXmlParam(WXPayUtil.generateSignedXml(paramMap,ConstantPropertiesUtils.PARTNERKEY));</span><br><span class="line">        client.setHttps(<span class="keyword">true</span>);</span><br><span class="line">        client.setCert(<span class="keyword">true</span>);<span class="comment">//退款证书</span></span><br><span class="line">        client.setCertPassword(ConstantPropertiesUtils.PARTNER);<span class="comment">//证书密码 商户key</span></span><br><span class="line">        <span class="comment">//发送post请求</span></span><br><span class="line">        client.post();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、返回退款数据</span></span><br><span class="line">        String xml = client.getContent();</span><br><span class="line">        Map&lt;String, String&gt; resultMap = WXPayUtil.xmlToMap(xml);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的食堂采购系统</title>
    <url>/2022/11/19/Java%E9%A3%9F%E5%A0%82%E9%87%87%E8%B4%AD%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的食堂采购系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>商户管理，套餐管理，申请记录，库房管理，入库记录，出库记录，采购计划，报表统计，耗材类别，出入库物品明细</p>
<p>商户制定申请物品-&gt;管理员审批制定采购计划-&gt;采购员采购-&gt;入库-&gt;出库</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[采购员]<br>caigou<br>1234qwer</p>
<p>[学生]<br>lisi<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZf9P.png" alt="zKZf9P.png"></td>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZ2tI.png" alt="zKZ2tI.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZRht.png" alt="zKZRht.png"></td>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZgAA.png" alt="zKZgAA.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZ67d.png" alt="zKZ67d.png"></td>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZh1f.png" alt="zKZh1f.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZ4c8.png" alt="zKZ4c8.png"></td>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZ5jS.png" alt="zKZ5jS.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZong.png" alt="zKZong.png"></td>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZTBQ.png" alt="zKZTBQ.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZbAs.png" alt="zKZbAs.png"></td>
<td><img src="https://s1.ax1x.com/2022/11/19/zKZ77j.png" alt="zKZ77j.png"></td>
</tr>
</tbody></table>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p>暂无</p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#110;&#x31;&#x6b;&#101;&#x32;&#x6b;&#101;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;">&#102;&#x61;&#110;&#x31;&#x6b;&#101;&#x32;&#x6b;&#101;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>受益匪浅的书籍</title>
    <url>/2022/11/22/%E5%8F%97%E7%9B%8A%E5%8C%AA%E6%B5%85%E7%9A%84%E4%B9%A6%E7%B1%8D/</url>
    <content><![CDATA[<p>即兴的智慧 </p>
<p>了不起的我 </p>
<p>1984 </p>
<p>美丽新世界 </p>
<p>英雄志 </p>
<p>活着 </p>
<p>时间简史 </p>
<p>人生 </p>
<p>思考，快与慢 </p>
<p>普林斯顿微积分读本 </p>
<p>独裁者手册 </p>
<p>科学元典合集（套装 29 册） </p>
<p>爱的博弈 </p>
<p>平凡的世界 </p>
<p>动物庄园 </p>
<p>红太阳是怎样升起的 </p>
<p>余英时的小时 </p>
<p>被讨厌的勇气 </p>
<p>罪与罚 </p>
<p>提问的智慧 </p>
<p>学会提问 </p>
<p>社会心理学 </p>
<p>影响力 </p>
<p>怪诞行为学 </p>
<p>忏悔录 </p>
<p>富爸爸穷爸爸 </p>
<p>小狗钱钱 </p>
<p>原生家庭：如何修补自己的性格缺陷 </p>
<p>基督山伯爵 </p>
<p>献给阿尔吉农的花束 </p>
<p>局外人 </p>
<p>阎连科的小说 </p>
<p>贫穷的本质 </p>
<p>像火箭科学家一样思考 </p>
<p>夹边沟记事 </p>
<p>资本论 </p>
<p>说谎者的扑克牌 </p>
<p>福各行为模型 </p>
<p>刘擎西方现代思想讲义 </p>
<p>可能性的艺术：比较政治学 30 讲 </p>
<p>大学之路 </p>
<p>极客电台 </p>
<p>李光耀观天下 </p>
<p>邓小平时代 </p>
<p>如何让你爱的人爱上你 </p>
<p>把时间当作朋友 </p>
<p>谈人的理性 </p>
<p>吃掉那只青蛙 </p>
<p>禅与摩托车维修艺术 </p>
<p>惨败 </p>
<p>新教伦理 </p>
<p>那不勒斯四部曲 </p>
<p>资治通鉴 </p>
<p>云边有个小卖部 </p>
<p>System Design Interview: An Insider’s Guide </p>
<p>纯粹理性批判 </p>
<p>第七天 </p>
<p>贪婪的多巴胺 </p>
<p>卡拉马佐夫兄弟 </p>
<p>陆犯焉识 </p>
<p>雪国 </p>
<p>烧纸 </p>
<p>挪威的森林 </p>
<p>秦制两千年 </p>
<p>秋园 </p>
<p>世界观 </p>
<p>源泉 </p>
<p>夜晚的潜水艇 </p>
<p>人类简史 </p>
<p>存在主义咖啡馆 </p>
<p>红楼梦 </p>
<p>生命不能承受之轻 </p>
<p>历史的先声 </p>
<p>How to Take Smart Notes </p>
<p>SICP </p>
<p>如何阅读一本书 </p>
<p>高效人士的七种习惯 </p>
<p>异乡人 </p>
<p>约翰克利斯朵夫 </p>
<p>你当像鸟飞往你的山 </p>
<p>想象的共同体 </p>
<p>旧制度与大革命 </p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Beast</title>
    <url>/2022/11/25/%E5%AF%B9%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%B1%E6%9C%9B%E7%9A%84CN/</url>
    <content><![CDATA[<p>为了那些衣冠禽兽而故作坚强姿态</p>
<p>归家躺下却如一无所有的死尸毫无生气</p>
<p>蝇营狗苟的屁民们活出自我吧</p>
<p>不要被政府施舍的五斗米压折脊梁</p>
<p>要为了人民而昂然挺立世间</p>
<p>为了我们的亲朋和友邻</p>
<p>在我们自己的土地上我们生而自由</p>
<p>决不能如蝼蚁那般卑微苟且地活着</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot拦截异常</title>
    <url>/2022/12/08/SpringBoot%E6%8B%A6%E6%88%AA%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>如果你想拦截异常，你可以在你的Springboot应用程序中定义一个统一的异常处理器来实现。</p>
<p>例如，你可以使用@ControllerAdvice注解来定义一个异常处理器，然后使用@ExceptionHandler注解来指定拦截哪些异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wxl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基础异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BaseException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">baseException</span><span class="params">(BaseException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(e.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">businessException</span><span class="params">(CustomException e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNull(e.getCode())) &#123;</span><br><span class="line">            <span class="keyword">return</span> AjaxResult.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义验证异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">validatedBindException</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        String message = e.getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义验证异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">validExceptionHandler</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        String message = e.getBindingResult().getFieldError().getDefaultMessage();</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(PreAuthorizeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">preAuthorizeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;没有权限，请联系管理员授权&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示模式异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(DemoModeException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">demoModeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;演示模式，不允许操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(DuplicateKeyException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">duplicateKeyHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;数据已存在，请勿重复提交&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(DataAccessException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">dataAccessException</span><span class="params">(DataAccessException e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;JDBC异常：&quot;</span> + e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;系统错误，请联系管理员！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AjaxResult <span class="title">httpMessageNotReadableException</span><span class="params">(HttpMessageNotReadableException e)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;Http请求参数转换异常：&quot;</span> + e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.error(<span class="string">&quot;系统错误，请联系管理员！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了一个名为GlobalExceptionHandler的异常处理器，并使用@ExceptionHandler注解来指定要拦截的异常类型。这样，当应用程序中发生Exception类型的异常时，该异常处理器就会被调用。</p>
<p>在异常处理器的方法中，你可以自定义如何处理这些异常。例如，你可以将异常信息记录到日志中，或者向用户展示一个错误消息，或者返回一个错误页面等。</p>
<p>总之，使用异常处理器是一种比较简单和优雅的方式来拦截异常，并对其进行统一处理。</p>
<h2 id="ControllerAdvice和-RestControllerAdvice的区别"><a href="#ControllerAdvice和-RestControllerAdvice的区别" class="headerlink" title="@ControllerAdvice和@RestControllerAdvice的区别"></a>@ControllerAdvice和@RestControllerAdvice的区别</h2><p>@ControllerAdvice注解和@RestControllerAdvice注解都可以用于定义一个异常处理器，但它们之间有一些区别：</p>
<p>@ControllerAdvice注解可以用于处理所有带有@Controller注解的控制器中的异常。这种类型的异常处理器通常用于处理Web应用程序中的异常，并向用户展示一个错误页面。<br>@RestControllerAdvice注解可以用于处理所有带有@RestController注解的控制器中的异常。这种类型的异常处理器通常用于处理RESTful接口中的异常，并将错误信息以JSON格式返回给客户端。<br>总之，@ControllerAdvice注解和@RestControllerAdvice注解都可以用于定义一个异常处理器，但它们的使用场景不同，应根据实际情况来选择合适的注解。</p>
<blockquote>
<p>如果你在微服务应用程序中定义了一个带有@ControllerAdvice注解的异常处理器，但它并没有被调用，那么可能是因为以下几种原因</p>
</blockquote>
<ol>
<li>异常处理器类上没有使用@ControllerAdvice注解：如果你的异常处理器类上没有使用@ControllerAdvice注解，那么它就不会被识别为一个异常处理器，因此也不会被调用。</li>
<li>异常处理方法上没有使用@ExceptionHandler注解：如果你的异常处理方法上没有使用@ExceptionHandler注解，那么它就不会被识别为一个异常处理方法，因此也不会被调用。</li>
<li>异常处理方法没有指定要处理的异常类型：如果你的异常处理方法没有指定要处理的异常类型，那么它就不会被调用。例如，如果你的异常处理方法只处理IOException类型的异常，那么如果应用程序中发生的异常不是IOException类型，那么这个方法就不会被调用。</li>
</ol>
<p>总之，如果你定义的异常处理器没有被调用，那么最可能的原因就是你的异常处理器类没有使用@ControllerAdvice</p>
<h2 id="日志异步线程池入库"><a href="#日志异步线程池入库" class="headerlink" title="日志异步线程池入库"></a>日志异步线程池入库</h2><blockquote>
<p>线程池配置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步线程池配置</span></span><br><span class="line"><span class="comment"> * 注1：不指定此线程池时，<span class="doctag">@Async</span>调用默认线程池，应注意默认线程池易引发OOM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(AsyncConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;asyncTaskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncTaskExecutor <span class="title">asyncTaskExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">//核心线程数</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//配置队列大小</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//活跃时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//配置线程池前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;async-task-thread-pool-&quot;</span>);</span><br><span class="line">        <span class="comment">//核心线程闲置超时则销毁</span></span><br><span class="line">        executor.setAllowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//子线程装饰器，用于将主线程数据传递给子线程</span></span><br><span class="line">        executor.setTaskDecorator(<span class="keyword">new</span> ContextCopyingDecorator());</span><br><span class="line">        <span class="comment">//拒绝策略：当线程池达到MaxPoolSize，不在新线程中执行任务，而是有调用者所在的线程来执行</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextCopyingDecorator</span> <span class="keyword">implements</span> <span class="title">TaskDecorator</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Runnable <span class="title">decorate</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;父线程：&#123;&#125;&quot;</span>, Thread.currentThread());</span><br><span class="line">            <span class="comment">//将主线程请求头内容赋值 threadLocal中的数据拿出并清除</span></span><br><span class="line">            AsyncSecurityUtils.setThreadLocal();</span><br><span class="line">            ThreadContextHolder parentContextHolder = ThreadContextHolder.getInstance();</span><br><span class="line">            Map&lt;String, String&gt; cloneMap = cloneMap(parentContextHolder.getContext());</span><br><span class="line">            parentContextHolder.clear();</span><br><span class="line">            <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">                ThreadContextHolder childContextHolder = ThreadContextHolder.getInstance();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;子线程：&#123;&#125;&quot;</span>, Thread.currentThread());</span><br><span class="line">                    childContextHolder.setContext(cloneMap);</span><br><span class="line">                    runnable.run();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//清除线程池线程threadLocal</span></span><br><span class="line">                    childContextHolder.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">cloneMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;(map);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>线程绑定信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Logger log = LoggerFactory.getLogger(ThreadContextHolder.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;String, String&gt;&gt; threadLocal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadContextHolder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadContextHolder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.S_INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态MJC类单例模式</span></span><br><span class="line"><span class="comment">     * 单例初使化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadContextHolder S_INSTANCE = <span class="keyword">new</span> ThreadContextHolder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前线程放置共享信息（用完执行clear()，防止内存泄漏）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 共享信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        threadLocal.set(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程共享信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 共享信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空上下文：（防止内存泄漏）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>异步调用日志服务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncLogService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RemoteLogService remoteLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存系统日志记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async(&quot;asyncTaskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveSysLog</span><span class="params">(SysOperLog sysOperLog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//todo 设置新线程池</span></span><br><span class="line">        remoteLogService.saveLog(sysOperLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Logback输出日志到自定义MySQL数据库"><a href="#Logback输出日志到自定义MySQL数据库" class="headerlink" title="Logback输出日志到自定义MySQL数据库"></a>Logback输出日志到自定义MySQL数据库</h2><p>在你的项目中添加Logback的依赖，并在classpath下创建一个名为”logback.xml”的配置文件，其内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DB&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.db.DBAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.db.DriverManagerConnectionSource&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://localhost:3306/logging?useSSL=false<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">user</span>&gt;</span>username<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DB&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年总结：转变&amp;缓行</title>
    <url>/2022/12/24/2022%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>2023装机心得</title>
    <url>/2023/01/08/2023%E8%A3%85%E6%9C%BA%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<blockquote>
<p>旧主机性能跟不上了，这几天一直看视频选了一套总价2k出头跑分百万的主机，来一起看看吧</p>
</blockquote>
<h2 id="硬件参数"><a href="#硬件参数" class="headerlink" title="硬件参数"></a>硬件参数</h2><p>CPU: AMD 锐龙 R5 5500 全新盒装 ￥509</p>
<p>主板:华硕 B450M-K 全新工包￥349</p>
<p>内存: 金百达 银爵 DDR4 3200 8G*2 全新盒装 ￥247</p>
<p>显卡: 撼讯 RX 5600 XT 6G 竟技版 二手矿卡 ￥616</p>
<p>硬盘:西部数据 SN570 500G NVME m.2 固态硬盘 全新盒装 ￥223</p>
<p>电源: 九州风神 PF500 额定 500W 白牌 全新盒装 ￥172.9</p>
<p>散热:冰曼 6热管 双塔 单风扇 全新盒装 ￥61.9</p>
<p>配件总计: ￥2,177.9</p>
<p>机箱: 先马黑洞 二手 ￥88</p>
<p>显示器: DELL 2k ￥650</p>
<p>显示器机械臂: 双频支架 ￥120</p>
<p>总计: ￥3035</p>
<h2 id="说说问题"><a href="#说说问题" class="headerlink" title="说说问题"></a>说说问题</h2><blockquote>
<p>B450M-K只有VGA、DVI接口，没有HDMI接口，HDMI线和DP线只能插在显卡上</p>
</blockquote>
<blockquote>
<p>在进行CPU超频，设置不了手动电压，超到43，自动电压直接升到1.5以上了，用aida64测试fpu，温度跑100，我见人家5500电压都能压到1.3~1.35，而且温度也才九十度左右。也可能是我哪里没有设置好的原因</p>
</blockquote>
<blockquote>
<p>5600xt的矿卡，暂时看起来没有什么问题，烤机也是正常</p>
</blockquote>
<blockquote>
<p>其他问题：2k屏幕进bios显示输入不支援，我查了一下说是要把显卡驱动删掉重新装，但是试了下没用，1080的没有问题</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2023/01/10/pSmBwo8.jpg" alt="pSmBwo8.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/10/pSmBBFS.png" alt="pSmBBFS.png"></p>
<p><img src="https://s1.ax1x.com/2023/01/10/pSmBddf.jpg" alt="pSmBddf.jpg"></p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的售后服务管理系统</title>
    <url>/2023/01/10/Java%E5%94%AE%E5%90%8E%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的售后服务管理系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok 支付的话用支付宝的沙箱</p>
<h2 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h2><p>1、用户管理<br>2、员工管理<br>3、评价管理<br>4、服务类型<br>5、预约管理<br>6、维修信息<br>7、产品信息<br>8、缴费记录<br>9、工单管理<br>10、公告信息</p>
<h2 id="客户"><a href="#客户" class="headerlink" title="客户"></a>客户</h2><p>1.我的工单<br>2.个人信息<br>3.缴费记录<br>4.维修信息</p>
<h2 id="维修员"><a href="#维修员" class="headerlink" title="维修员"></a>维修员</h2><p>1.我的任务<br>产品售后服务系统</p>
<p>我国信息产业、企业售后服务发展迅速,电商的发展超出了所有人都想象，与此同时也带来了诸多的问题。飞速发展的交易额，带来了大量的GDP增长，然而光鲜的背后是每天无数客服手忙脚乱的为顾客服务。由于顾客对自身生活质量要求越来越高，售后管理业必须随着人们生活水平的提高而改变。伴随着购物规模的不断扩大，售后的各项反馈、投诉，对售后的要求等都将越来越复杂，售后管理系统的自身的管理工作量也将越来越大。人工服务不能做到及时有效的反映，以及做出正确的应对以及保存，迫切需要一个系统来解决这些问题。本项目的出发点力在解决这一困难！</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[客户]<br>fank<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmD0n1.png" alt="zKZf9P.png"></td>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDB0x.png" alt="zKZ2tI.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDD76.png" alt="zKZRht.png"></td>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDdXR.png" alt="zKZgAA.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDac9.png" alt="zKZ67d.png"></td>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDsAK.png" alt="zKZh1f.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDytO.png" alt="zKZ4c8.png"></td>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmD6hD.png" alt="zKZ5jS.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDb9g.png" alt="zKZong.png"></td>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDTN8.png" alt="zKZTBQ.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmD74S.png" alt="zKZbAs.png"></td>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDq3Q.png" alt="zKZ77j.png"></td>
</tr>
<tr>
<td><img src="https://s1.ax1x.com/2023/01/10/pSmDoAf.png" alt="zKZbAs.png"></td>
<td></td>
</tr>
</tbody></table>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p>暂无</p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#x6e;&#49;&#x6b;&#x65;&#x32;&#107;&#101;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#102;&#x61;&#x6e;&#49;&#x6b;&#x65;&#x32;&#107;&#101;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<p><code>因为要恰饭资源非免费，伸手党勿扰，谢谢理解</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
<p>关键词： Java技术；产品售后；管理系统</p>
<h3 id="系统管理模块"><a href="#系统管理模块" class="headerlink" title="系统管理模块"></a>系统管理模块</h3><p>该模块主要用于对系统进行管理，包括系统权限的设置，系统管理员的增加删除，密码的修改，用户的管理等。</p>
<p>系统权限是系统操作的先决条件。设计系统必须对使用系统的人作出分类，不同的人能够使用的权限是不同的，管理员权限不能随意授予，只能交给公司高层使用。普通用户使用的是普通权限。他们只能对自己的信息进行修改查询，不能对其他人进行查询修改，否则信息泄露，公司会变成一团糟。</p>
<h3 id="服务信息管理模块"><a href="#服务信息管理模块" class="headerlink" title="服务信息管理模块"></a>服务信息管理模块</h3><p>该模块主要是对消费者的信息进行管理维护，对客户信息进行数据建档,包括售后服务信息的添加、删除和修改。客户在购买之后，可以对客户信息进行登记录入系统，然后对客户进行跟踪服务，客户可对服务进行点评，提出建议，公司可不定时对客户发放问卷，进行满意度调查。</p>
<h3 id="后台数据库设计"><a href="#后台数据库设计" class="headerlink" title="后台数据库设计"></a>后台数据库设计</h3><p>在数据库被推出的十多年来，数据库管理系统得到了迅猛的发展，从以前简单的应用程序发展成为了拥有自己专属的语言，专门的理论，专业的研究人员的系统软件。通过数据库管理系统，将数据库中的数据变得结构清晰，关系明确，冗余度低，拥有较高的程序独立性，容易增减，条理清楚，易于被相关的系统或者程序调用，因此，不论是大型的系统软件还是小型的应用软件都建立在数据库的基础之上，大大降低了数据保存的难度，使得计算技术得以广泛的推广。在近几年来逐渐流行的大数据分析，也是建立在数据库的基础上，对海量的数据进行相关的分析。随着计算机软件的广泛推广，对于数据库的性能要求越来越高，反过来也促进了数据库技术的发展。通过不同的设计方式设计出来的数据库，在各个方面的优劣也不相同。比如：在大型数据处理系统中，不仅对数据库的稳定性有极高的要求，性能方面也不能差的太多，这就需要使稳定性和高性能达到一个平衡；然而在微型计算机系统中，数据规模不大，需要的是能够及时的响应用户的相关操作，因此对性能就有极高的要求。随着对数据库的研究越来越正式化，科学化，投入不断地增加，已经使得现在的数据库系统从以前的单纯处理加工数据为中心转变为围绕共享的数据库为中心，这种数据库的改变，更加的方便了数据的集中管理，有效的挖掘出数据中蕴含的更加丰富的信息，有利于应用程序对数据的调用，也方便了程序本身的开发和维护，通过对相同的数据整合，不仅节省了数据库空间，更使得数据本身之间的联系更加明确清晰。</p>
<p>同时，数据库中的相关数据，都是从现实生活中抽象得来的。通过对现实世界的实体模型的抽象化，将实体模型的各种属性都量化为一个个具体的数字，不同的数据，表明了实体模型的差异性，相似升值相同的数据，表明了实体模型之间的相似性。所以，通过设计不同的数据库，不同的表，视图，行，列就可以把实体模型转换为数据库模型。所以，数据库设计的好坏，也直接影响了能否完整的将一个实体模型所具有的特点直接彰显出来，突出实体模型之间的差异性。</p>
<p>综上所述，数据库设计是数据库的核心，是数据库管理系统的核心任务，是评价一个系统好坏优劣的主要标准，是能否直截了当地将数据之间的关系展现出来，是能否和现实世界完美的结合起来的主要手段。数据库设计的不好，小则影响了系统中某一个功能模块的流畅运行，大则是的整个系统都不能达到要求，造成巨大的损失。数据库设计的不好，其他一切用来提升数据库性能的方法和手段都会收效甚微。在数据库设计不断发展的进程中，人们逐渐提出了一系列标准和方法来规范数据库的设计。在现在流行的关系型数据中，这些标准和方法叫做范式，换句话说，范式就是某一种关系的集合。现在人们遵循的大多为第三范式，即：在某个数据库表中不能包含其他表中的非主关键字。这种范式的采用，降低了数据冗余，明确了表和表之间的关系，提升了数据库相关操作的性能。</p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>企业问题清单</title>
    <url>/2023/01/17/%E4%BC%81%E4%B8%9A%E9%97%AE%E9%A2%98%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<blockquote>
<p>MYSQL迁移数据库到另一台机器 mysqldump</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">mysqlddump -u root -p -all-databases &gt; /d/databases.sql</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line">mysqldump -u root --all-databases &gt; /home/databases.sql</span><br></pre></td></tr></table></figure>


<p>或者直接复制数据目录到新机器</p>
<blockquote>
<p>Linux服务启动脚本</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"> <span class="comment"># @Descripttion: </span></span><br><span class="line"> <span class="comment"># @Author: wangzn</span></span><br><span class="line"> <span class="comment"># @Date: 2022-11-30 17:14:00</span></span><br><span class="line"> <span class="comment"># @LastEditors: wangzn</span></span><br><span class="line"> <span class="comment"># @LastEditTime: 2022-11-30 17:24:36</span></span><br><span class="line"><span class="comment">### </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  =====关闭isup应用======&quot;</span></span><br><span class="line">ids=`ps -ef | grep <span class="string">&quot;uap-modules-isup-2.2.0.jar&quot;</span> | grep -v <span class="string">&quot;grep&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前服务进程id:&quot;</span> <span class="variable">$ids</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$ids</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Kill ID--&gt; the process [ <span class="variable">$i</span> ]&quot;</span></span><br><span class="line">  <span class="built_in">kill</span> -9 <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  =====&gt;启动isup应用中....&quot;</span></span><br><span class="line">nohup java -jar -Xms128m  -Xmx512m -XX:PermSize=128M -XX:MaxPermSize=512M uap-modules-isup-2.2.0.jar --server.port=9209 --spring.profiles.active=<span class="built_in">test</span> --spring.cloud.nacos.discovery.server-addr=10.129.138.144:8848 --spring.cloud.nacos.discovery.group=yun-144 --spring.cloud.nacos.config.namespace=090d6ad3-0fc5-4411-9dab-7c144c128add &gt; <span class="built_in">log</span>/isup.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;  =====&gt;启动isup应用完成OK&quot;</span></span><br><span class="line">tail -f <span class="built_in">log</span>/isup.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分段批量入库</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> limit = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> size = filter.size();</span><br><span class="line"><span class="keyword">int</span> checkTimes = ((size - <span class="number">1</span>) / limit) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= checkTimes - <span class="number">1</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">int</span> aa = i * limit;</span><br><span class="line">   <span class="keyword">int</span> bb = (i + <span class="number">1</span>) * limit;</span><br><span class="line">   <span class="keyword">if</span> (i == checkTimes - <span class="number">1</span>) &#123;</span><br><span class="line">        bb = size;</span><br><span class="line">   &#125;</span><br><span class="line">   List&lt;SupplierEvaluationYear&gt; subList = filter.subList(aa, bb);</span><br><span class="line">   saveBatch(subList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据属性高低排名</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排名条件：评牌 &gt; 综合得分 &gt; 供货金额 （未评牌不排名）</span></span><br><span class="line">List&lt;?&gt; tempList = entry.getValue().stream()</span><br><span class="line">                    .filter(s -&gt; !Integer.valueOf(NO_LEVEL).equals(s.getTempEvaluateGrade()))</span><br><span class="line">                    .sorted(Comparator.comparing(SupplierGroupEvaluationYear::getTempEvaluateGrade).reversed()</span><br><span class="line">                    .thenComparing(SupplierGroupEvaluationYear::getOverallScore, Comparator.nullsFirst(BigDecimal::compareTo))</span><br><span class="line">                    .thenComparing(SupplierGroupEvaluationYear::getSupplyAmount, Comparator.nullsFirst(BigDecimal::compareTo)).reversed()).collect(toList());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重复key属性取值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sysDeptList.stream().collect(Collectors.toMap(SysDept::getDeptName, SysDept::getDeptId, (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多属性去重</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">qualifiedList.stream().collect(Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getEnterpriseId() + <span class="string">&quot;-&quot;</span> + o.getTenantId()))), ArrayList::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>过滤重复分组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeMap&lt;Integer, SupplierRuleGrade&gt; levelRuleMap = levelRulesList.stream().collect(</span><br><span class="line">                Collectors.toMap(SupplierRuleGrade::getLevel, Function.identity(), (o1, o2) -&gt; o1, TreeMap::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年结尾</title>
    <url>/2023/01/27/2022%E5%B9%B4%E7%BB%93%E5%B0%BE/</url>
    <content><![CDATA[<blockquote>
<p>开心的时光总是短暂</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSA1K.jpg" alt="pSUSA1K.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSifx.jpg" alt="pSUSifx.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSkp6.jpg" alt="pSUSkp6.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSPt1.jpg" alt="pSUSPt1.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSCkR.jpg" alt="pSUSCkR.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSVXD.jpg" alt="pSUSVXD.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSE6O.jpg" alt="pSUSE6O.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSn7d.jpg" alt="pSUSn7d.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSm0H.jpg" alt="pSUSm0H.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/27/pSUSene.jpg" alt="pSUSene.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa3G6K.jpg" alt="pSa3G6K.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa38l6.jpg" alt="pSa38l6.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa3lf1.jpg" alt="pSa3lf1.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa33Sx.jpg" alt="pSa33Sx.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa3QYR.jpg" alt="pSa3QYR.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa3JOO.jpg" alt="pSa3JOO.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/01/28/pSa3tmD.jpg" alt="pSa3tmD.jpg"></p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Java深浅拷贝工具</title>
    <url>/2023/02/06/Java%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.avicnet.uap.common.core.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.beans.BeanCopier;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 拷贝源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classTargetType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E&gt; <span class="function">E <span class="title">clone</span><span class="params">(T source, Class&lt;E&gt; classTargetType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        E targetInstance;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            targetInstance = classTargetType.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        BeanUtils.copyProperties(source, targetInstance);</span><br><span class="line">        <span class="keyword">return</span> targetInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拷贝数组对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList 拷贝源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classType 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E&gt; <span class="function">List&lt;E&gt; <span class="title">batchClone</span><span class="params">(List&lt;T&gt; sourceList, Class&lt;E&gt; classType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;E&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T t : sourceList) &#123;</span><br><span class="line">            result.add(clone(t, classType));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceObj   被拷贝对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass 拷贝类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">convertToTarget</span><span class="params">(Object sourceObj, Class&lt;T&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        T targetObj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            targetObj = targetClass.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(sourceObj, targetObj);</span><br><span class="line">        <span class="keyword">return</span> targetObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝数组对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList  被拷贝数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetClass 拷贝类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">convertToTargetList</span><span class="params">(List&lt;?&gt; sourceList, Class&lt;T&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(sourceList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;T&gt; targetList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object sourceObj : sourceList) &#123;</span><br><span class="line">            T targetObj = convertToTarget(sourceObj, targetClass);</span><br><span class="line">            targetList.add(targetObj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> targetList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝对象(性能++)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source  被拷贝数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 拷贝类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">T <span class="title">convert</span><span class="params">(S source, Class&lt;T&gt; dest, Function&lt;T, T&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T result = dest.newInstance();</span><br><span class="line">            <span class="keyword">final</span> BeanCopier copier = BeanCopier.create(source.getClass(), dest, <span class="keyword">false</span>);</span><br><span class="line">            copier.copy(source, result, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (function != <span class="keyword">null</span>) &#123;</span><br><span class="line">                function.apply(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝对象(性能++)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> copier 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function 功能校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">T <span class="title">convert</span><span class="params">(BeanCopier copier, S source, Class&lt;T&gt; dest, Function&lt;T, T&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            T result = dest.newInstance();</span><br><span class="line">            copier.copy(source, result, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (function != <span class="keyword">null</span>) &#123;</span><br><span class="line">                function.apply(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浅拷贝数组(性能++)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceList 被拷贝数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function 功能校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标类型数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">List&lt;T&gt; <span class="title">convertList</span><span class="params">(List&lt;S&gt; sourceList, Class&lt;T&gt; dest, Function&lt;T, T&gt; function)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(sourceList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;T&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">final</span> BeanCopier copier = BeanCopier.create(sourceList.get(<span class="number">0</span>).getClass(), dest, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (S source : sourceList) &#123;</span><br><span class="line">                T result = dest.newInstance();</span><br><span class="line">                copier.copy(source, result, <span class="keyword">null</span>);</span><br><span class="line">                resultList.add(result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (function != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultList.forEach(function::apply);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultList;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 源类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; <span class="function">BeanCopier <span class="title">createCopier</span><span class="params">(Class&lt;S&gt; source, Class&lt;T&gt; dest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BeanCopier.create(source, dest, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>忙碌的日子</title>
    <url>/2023/03/26/%E5%BF%99%E7%A2%8C%E7%9A%84%E6%97%A5%E5%AD%90/</url>
    <content><![CDATA[<blockquote>
<p>Yesterday</p>
</blockquote>
<p>我说我忘了太多，希望不是因为变老</p>
<p>时间走慢点拜托，是否自视甚高 答案你是否知道</p>
<p>把你拆解 才发现我是那么复杂，眼前望去整个曼哈顿多亮，下雪的夜里 跟你的家乡多像</p>
<p>别跟谁对比 保持我的模样</p>
<p><img src="https://s1.ax1x.com/2023/03/26/ppses9f.jpg" alt="ppses9f.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/03/26/ppseD4P.jpg" alt="ppseD4P.jpg"></p>
<blockquote>
<p>可怜的樊可已经有了白发</p>
</blockquote>
<p><img src="https://s1.ax1x.com/2023/03/26/ppsey38.jpg" alt="ppsey38.jpg"></p>
<p><img src="https://s1.ax1x.com/2023/03/26/ppseBNt.jpg" alt="ppseBNt.jpg"></p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
</search>
