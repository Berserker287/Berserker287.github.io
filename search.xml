<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>本该如此轻松</title>
    <url>/2021/05/09/%E6%9C%AC%E8%AF%A5%E5%A6%82%E6%AD%A4%E8%BD%BB%E6%9D%BE/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="本该如此轻松"><a href="#本该如此轻松" class="headerlink" title="本该如此轻松"></a>本该如此轻松</h2><p>我们立志让计算机和金融商科专业背景的同学能够在所有的课程中获得高GPA</p>
<h3 id="RESPONSIVE"><a href="#RESPONSIVE" class="headerlink" title="RESPONSIVE"></a>RESPONSIVE</h3><p>7*24小时不间断服务，平均回复时长不超过1分钟，高效沟通，只为解决你的疑惑</p>
<h3 id="QUALITY"><a href="#QUALITY" class="headerlink" title="QUALITY"></a>QUALITY</h3><p>作业质量经过层层把关，杜绝抄袭、重复赘述等问题，详细注释，思路解析，一点就通</p>
<h3 id="SUPPORT"><a href="#SUPPORT" class="headerlink" title="SUPPORT"></a>SUPPORT</h3><p>7天售后，作业有问题全额退款，精英导师手把手答疑解惑</p>
<p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
  </entry>
  <entry>
    <title>基于SpringBoot的旅游景区项目</title>
    <url>/2022/05/21/Java%E6%99%AF%E5%8C%BA%E6%97%85%E6%B8%B8%E9%A1%B9%E7%9B%AE%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的旅游景区项目.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>支付宝沙盒支付<br>百度地图JS</p>
<p>民宿管理员：订单数量统计，订单交易额统计，客房统计饼图，酒店信息修改，房间订单查询，房间入住状态修改，查看住宿订单详情，酒店房间管理，查看用户房间订单评价</p>
<p>超级管理员：景点民宿导航，公告管理，订单评价，民宿管理，民宿订单，论坛管理，消息回复，房间信息，景点管理，用户管理，景区订单</p>
<p>用户：邮箱注册，修改个人信息，订单支付，我的贴子，订单评价，发帖回复，修改密码</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[民宿管理员]<br>xierdun<br>1234qwer</p>
<p>[用户]<br>test<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://imgtu.com/i/OIVagf"><img src="https://s1.ax1x.com/2022/05/17/OIVagf.png" alt="OIVagf.png"></a></td>
<td><a href="https://imgtu.com/i/OIVBDg"><img src="https://s1.ax1x.com/2022/05/17/OIVBDg.png" alt="OIVBDg.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVDbQ"><img src="https://s1.ax1x.com/2022/05/17/OIVDbQ.png" alt="OIVDbQ.png"></a></td>
<td><a href="https://imgtu.com/i/OIV0KS"><img src="https://s1.ax1x.com/2022/05/17/OIV0KS.png" alt="OIV0KS.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVdv8"><img src="https://s1.ax1x.com/2022/05/17/OIVdv8.png" alt="OIVdv8.png"></a></td>
<td><a href="https://imgtu.com/i/OIVgCq"><img src="https://s1.ax1x.com/2022/05/17/OIVgCq.png" alt="OIVgCq.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIV5b4"><img src="https://s1.ax1x.com/2022/05/17/OIV5b4.png" alt="OIV5b4.png"></a></td>
<td><a href="https://imgtu.com/i/OIVsEj"><img src="https://s1.ax1x.com/2022/05/17/OIVsEj.png" alt="OIVsEj.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVyUs"><img src="https://s1.ax1x.com/2022/05/17/OIVyUs.png" alt="OIVyUs.png"></a></td>
<td><a href="https://imgtu.com/i/OIV65n"><img src="https://s1.ax1x.com/2022/05/17/OIV65n.png" alt="OIV65n.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIV280"><img src="https://s1.ax1x.com/2022/05/17/OIV280.png" alt="OIV280.png"></a></td>
<td><a href="https://imgtu.com/i/OIVhKU"><img src="https://s1.ax1x.com/2022/05/17/OIVhKU.png" alt="OIVhKU.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIVR2V"><img src="https://s1.ax1x.com/2022/05/17/OIVR2V.png" alt="OIVR2V.png"></a></td>
<td><a href="https://imgtu.com/i/OIV4rF"><img src="https://s1.ax1x.com/2022/05/17/OIV4rF.png" alt="OIV4rF.png"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/OIuelq"><img src="https://s1.ax1x.com/2022/05/17/OIuelq.png" alt="OIuelq.png"></a></td>
<td><a href="https://imgtu.com/i/OIum60"><img src="https://s1.ax1x.com/2022/05/17/OIum60.png" alt="OIum60.png"></a></td>
</tr>
</tbody></table>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1S94y1f7Dg/">项目视频：基于Spring的旅游住宿小程序</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#x6e;&#49;&#x6b;&#x65;&#x32;&#x6b;&#x65;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;">&#102;&#x61;&#x6e;&#49;&#x6b;&#x65;&#x32;&#x6b;&#x65;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Stream完全使用指南</title>
    <url>/2022/05/21/Java8%20Stream%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h2><p>Stream是Java 1.8版本开始提供的一个接口，主要提供对数据集合使用流的方式进行操作，流中的元素不可变且只会被消费一次，所有方法都设计成支持链式调用。使用Stream API可以极大生产力，写出高效率、干净、简洁的代码。</p>
<h2 id="如何获得Stream实例"><a href="#如何获得Stream实例" class="headerlink" title="如何获得Stream实例"></a>如何获得Stream实例</h2><p>Stream提供了静态构建方法，可以基于不同的参数创建返回Stream实例<br>使用Collection的子类实例调用stream()或者parallelStream()方法也可以得到Stream实例，两个方法的区别在于后续执行Stream其他方法的时候是单线程还是多线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//无限长的偶数流</span></span><br><span class="line">Stream&lt;Integer&gt; evenNumStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; strStream = strList.stream();</span><br><span class="line">Stream&lt;String&gt; strParallelStream = strList.parallelStream();</span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter方法用于根据指定的条件做过滤，返回符合条件的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//获得只包含正数的流，positiveNumStream -&gt; (1，2，3)</span></span><br><span class="line">Stream&lt;Integer&gt; positiveNumStream = numStream.filter(num -&gt; num &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map方法用于将流中的每个元素执行指定的转换逻辑，返回其他类型元素的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//转换成字符串流</span></span><br><span class="line">Stream&lt;String&gt; strStream = numStream.map(String::valueOf);</span><br></pre></td></tr></table></figure>

<h2 id="mapToInt-mapToLong-mapToDouble"><a href="#mapToInt-mapToLong-mapToDouble" class="headerlink" title="mapToInt mapToLong mapToDouble"></a>mapToInt mapToLong mapToDouble</h2><p>这三个方法是对map方法的封装，返回的是官方为各个类型单独定义的Stream，该Stream还提供了适合各自类型的其他操作方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">IntStream intStream = stringStream.mapToInt(Integer::parseInt);</span><br><span class="line">LongStream longStream = stringStream.mapToLong(Long::parseLong);</span><br><span class="line">DoubleStream doubleStream = stringStream.mapToDouble(Double::parseDouble);</span><br></pre></td></tr></table></figure>

<h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>flatMap方法用于将流中的每个元素转换成其他类型元素的流，比如，当前有一个订单(Order)列表，每个订单又包含多个商品(itemList)，如果要得到所有订单的所有商品汇总，就可以使用该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Item&gt; allItemStream = orderList.stream().flatMap(order -&gt; order.itemList.stream());</span><br></pre></td></tr></table></figure>

<h2 id="flatMapToInt-flatMapToLong-flatMapToDouble"><a href="#flatMapToInt-flatMapToLong-flatMapToDouble" class="headerlink" title="flatMapToInt flatMapToLong flatMapToDouble"></a>flatMapToInt flatMapToLong flatMapToDouble</h2><p>这三个方法是对flatMap方法的封装，返回的是官方为各个类型单独定义的Stream，使用方法同上</p>
<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h2><p>distinct方法用于对流中的元素去重，判断元素是否重复使用的是equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//不重复的数字流，uniqueNumStream -&gt; (-2, -1, 0, 1, 2, 3)</span></span><br><span class="line">Stream&lt;Integer&gt; uniqueNumStream = numStream.distinct();</span><br></pre></td></tr></table></figure>

<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><p>sorted有一个无参和一个有参的方法，用于对流中的元素进行排序。无参方法要求流中的元素必须实现Comparable接口，不然会报java.lang.ClassCastException异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; unorderedStream = Stream.of(<span class="number">5</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//按从小到大排序完成的流，orderedStream -&gt; (4, 5, 6, 7, 27, 32)</span></span><br><span class="line">Stream&lt;Integer&gt; orderedStream = unorderedStream.sorted();</span><br></pre></td></tr></table></figure>

<p>有参方法sorted(Comparator&lt;? super T&gt; comparator)不需要元素实现Comparable接口，通过指定的元素比较器对流内的元素进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; unorderedStream = Stream.of(<span class="string">&quot;1234&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;12345&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//按字符串长度从小到大排序完成的流，orderedStream -&gt; (&quot;1&quot;, &quot;12&quot;, &quot;123&quot;, &quot;1234&quot;, &quot;12345&quot;, &quot;123456&quot;)</span></span><br><span class="line">Stream&lt;String&gt; orderedStream = unorderedStream.sorted(Comparator.comparingInt(String::length));</span><br></pre></td></tr></table></figure>

<h2 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h2><p>peek方法可以不调整元素顺序和数量的情况下消费每一个元素，然后产生新的流，按文档上的说明，主要是用于对流执行的中间过程做debug的时候使用，因为Stream使用的时候一般都是链式调用的，所以可能会执行多次流操作，如果想看每个元素在多次流操作中间的流转情况，就可以使用这个方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">     .filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">     .peek(e -&gt; System.out.println(<span class="string">&quot;Filtered value: &quot;</span> + e))</span><br><span class="line">     .map(String::toUpperCase)</span><br><span class="line">     .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">     .collect(Collectors.toList());</span><br><span class="line">     </span><br><span class="line">输出：</span><br><span class="line">Filtered value: three</span><br><span class="line">Mapped value: THREE</span><br><span class="line">Filtered value: four</span><br><span class="line">Mapped value: FOUR</span><br></pre></td></tr></table></figure>

<h2 id="limit-long-maxSize"><a href="#limit-long-maxSize" class="headerlink" title="limit(long maxSize)"></a>limit(long maxSize)</h2><p>limit方法会对流进行顺序截取，从第1个元素开始，保留最多maxSize个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//截取前3个元素，subStringStream -&gt; (&quot;-2&quot;, &quot;-1&quot;, &quot;0&quot;)</span></span><br><span class="line">Stream&lt;String&gt; subStringStream = stringStream.limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="skip-long-n"><a href="#skip-long-n" class="headerlink" title="skip(long n)"></a>skip(long n)</h2><p>skip方法用于跳过前n个元素，如果流中的元素数量不足n，则返回一个空的流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//跳过前3个元素，subStringStream -&gt; (&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</span></span><br><span class="line">Stream&lt;String&gt; subStringStream = stringStream.skip(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>forEach方法的作用跟普通的for循环类似，不过这个可以支持多线程遍历，但是不保证遍历的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//单线程遍历输出元素</span></span><br><span class="line">stringStream.forEach(System.out::println);</span><br><span class="line"><span class="comment">//多线程遍历输出元素</span></span><br><span class="line">stringStream.parallel().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="forEachOrdered"><a href="#forEachOrdered" class="headerlink" title="forEachOrdered"></a>forEachOrdered</h2><p>forEachOrdered方法可以保证顺序遍历，比如这个流是从外部传进来的，然后在这之前调用过parallel方法开启了多线程执行，就可以使用这个方法保证单线程顺序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//顺序遍历输出元素</span></span><br><span class="line">stringStream.forEachOrdered(System.out::println);</span><br><span class="line"><span class="comment">//多线程遍历输出元素，下面这行跟上面的执行结果是一样的</span></span><br><span class="line"><span class="comment">//stringStream.parallel().forEachOrdered(System.out::println);</span></span><br></pre></td></tr></table></figure>

<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h2><p>toArray有一个无参和一个有参的方法，无参方法用于把流中的元素转换成Object数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">Object[] objArray = stringStream.toArray();</span><br></pre></td></tr></table></figure>

<p>有参方法toArray(IntFunction&lt;A[]&gt; generator)支持把流中的元素转换成指定类型的元素数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;-2&quot;</span>, <span class="string">&quot;-1&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">String[] strArray = stringStream.toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>reduce有三个重载方法，作用是对流内元素做累进操作</p>
<p>第一个reduce(BinaryOperator<T> accumulator)</p>
<p>accumulator 为累进操作的具体计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//查找最小值</span></span><br><span class="line">Optional&lt;Integer&gt; min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class="line"><span class="comment">//输出 -2</span></span><br><span class="line">System.out.println(min.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤出大于5的元素流</span></span><br><span class="line">numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).filter(num -&gt; num &gt; <span class="number">5</span>);</span><br><span class="line"><span class="comment">//查找最小值</span></span><br><span class="line">min = numStream.reduce(BinaryOperator.minBy(Integer::compareTo));</span><br><span class="line"><span class="comment">//输出 Optional.empty</span></span><br><span class="line">System.out.println(min);</span><br></pre></td></tr></table></figure>

<p>第二个reduce(T identity, BinaryOperator<T> accumulator)</p>
<p>identity 为累进操作的初始值<br>accumulator 同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//累加计算所有元素的和，sum=3</span></span><br><span class="line"><span class="keyword">int</span> sum = numStream.reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure>

<h2 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h2><p>主要作用是把流中的元素作为集合转换成其他Collection的子类，其内部实现类似于前面的累进操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; numList = numStream.collect(Collectors.toList());</span><br><span class="line">Set&lt;Integer&gt; numSet = numStream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure>

<h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><p>min方法用于计算流内元素的最小值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Optional&lt;Integer&gt; min = numStream.min(Integer::compareTo);</span><br></pre></td></tr></table></figure>

<h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><p>min方法用于计算流内元素的最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Optional&lt;Integer&gt; max = numStream.max(Integer::compareTo);</span><br></pre></td></tr></table></figure>

<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>count方法用于统计流内元素的总个数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//count=6</span></span><br><span class="line"><span class="keyword">long</span> count = numStream.count();</span><br></pre></td></tr></table></figure>

<h2 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h2><p>anyMatch方法用于匹配校验流内元素是否有符合指定条件的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//判断是否包含正数，hasPositiveNum=true</span></span><br><span class="line"><span class="keyword">boolean</span> hasPositiveNum = numStream.anyMatch(num -&gt; num &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h2><p>noneMatch方法用于匹配校验流内元素是否都不符合指定条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//判断是否没有小于0的元素，noNegativeNum=false</span></span><br><span class="line"><span class="keyword">boolean</span> noNegativeNum = numStream.noneMatch(num -&gt; num &lt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h2><p>findFirst方法用于获取第一个元素，如果流是空的，则返回Optional.empty</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//获取第一个元素，firstNum=-2</span></span><br><span class="line">Optional&lt;Integer&gt; firstNum = numStream.findFirst();</span><br></pre></td></tr></table></figure>

<h2 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h2><p>findAny方法用于获取流中的任意一个元素，如果流是空的，则返回Optional.empty，因为可能会使用多线程，所以不保证每次返回的是同一个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; numStream = Stream.of(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Optional&lt;Integer&gt; anyNum = numStream.findAny();</span><br></pre></td></tr></table></figure>


<p>More info: <a href="https://segmentfault.com/a/1190000022791696">MartinDai</a></p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot学习论坛系统</title>
    <url>/2022/05/22/Java%E5%AD%A6%E4%B9%A0%E8%AE%BA%E5%9D%9B%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot学习论坛系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>（1）用户的注册登录</p>
<p>（2）帖子的发布与评论</p>
<p>（3）前台不同学科帖子的分类与展示</p>
<p>（4）搜索功能，对于想要搜索的学科与具体帖子进行搜索</p>
<p>（5）基于用户喜欢的帖子的类型进行相关学科类别的帖子进行内容推荐</p>
<p>（6）用户对于自己帖子的管理</p>
<p>（7）用户对于自己喜欢的帖子点赞及收藏</p>
<p>（8）对敏感词汇的屏蔽处理</p>
<p>（9）管理员对用户帖子以及评论的管理</p>
<p>（10）管理员对于帖子的板块分类管理</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[用户]<br>test<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1RB4y1174A/">项目视频：基于Spring学习论坛系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#x6e;&#49;&#107;&#x65;&#x32;&#x6b;&#x65;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#102;&#x61;&#x6e;&#49;&#107;&#x65;&#x32;&#x6b;&#x65;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的学生选课系统</title>
    <url>/2022/05/22/Java%E5%AD%A6%E7%94%9F%E9%80%89%E8%AF%BE%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的学生选课系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>教员，学生账号注册；管理员，教员，学生账号登陆，系统公告管理，系统动态管理，系统数据统计（学生统计，教员统计，课程统计， 缺席统计）</p>
<p>学生专业分布状况统计图，访问记录统计图，课程预约人数统计图，参加课程学生情况，学生选课信息，教员代课信息</p>
<p>管理员：课程管理，学生管理，教员管理，选课管理，系统用户管理，系统公告管理，系统动态管理，系统账户封禁</p>
<p>教员：教员信息管理，查看学生列表信息，教学任务管理，选课或停课，查看当前课程学生情况</p>
<p>学生：个人信息修改，课程预约，学生课程管理</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[教员]<br>test1<br>1234qwer</p>
<p>[学生]<br>fkkk<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1ui4y1Q7oS/">项目视频：基于Spring的学生选课系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#x61;&#110;&#x31;&#x6b;&#x65;&#x32;&#x6b;&#101;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#102;&#x61;&#110;&#x31;&#x6b;&#x65;&#x32;&#x6b;&#101;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的实验室耗材管理系统</title>
    <url>/2022/05/22/Java%E5%AE%9E%E9%AA%8C%E5%AE%A4%E8%80%97%E6%9D%90%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的实验室耗材管理系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>学生管理，套餐管理，申请记录，库房管理，入库记录，出库记录，采购计划，报表统计，耗材类别，出入库物品明细</p>
<p>学生制定申请耗材-&gt;管理员审批制定采购计划-&gt;采购员采购-&gt;入库-&gt;出库</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[采购员]<br>caigou<br>1234qwer</p>
<p>[学生]<br>lisi<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1y94y1f783/">项目视频：基于Spring的实验室耗材管理系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#x66;&#97;&#x6e;&#49;&#107;&#101;&#50;&#x6b;&#x65;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x66;&#97;&#x6e;&#49;&#107;&#101;&#50;&#x6b;&#x65;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的小区物业管理系统</title>
    <url>/2022/05/22/Java%E5%B0%8F%E5%8C%BA%E7%89%A9%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于SpringBoot的小区物业管理系统.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>1、实现小区信息管理（包括业主信息，楼宇信息，房间信息的管理，业主数量统计，房间数量统计（包括无人居住房与居住））；<br>2、实现物业费用缴纳管理（水电煤气清洁电梯停车位物业管理等费用数据管理，能够生成物业缴费的信息报表，缴费记录管理）；<br>3、物业项管理（包括水，电，煤气，清洁，消防，停车位等信息的管理）；<br>4、物业抄表入库管理（包括根据不同物业项以及业主的统计生成物业报表并将报表入库）；<br>5、业主日常管理（包括业主投诉，维修上报，业主评论及建议）；<br>6、物业抄表入库管理（包括根据不同物业项以及业主的统计生成物业报表并将报表入库）；<br>7、防疫登记管理（包括体温，健康码情况，进入时间以及地点）；<br>8、工作人员管理（包括管理员信息，管理人员权限，物业工作人员信息）；<br>9、公告管理（管理人员对相关的物业信息给予公告，包括停电停水暖气等相关信息）。</p>
<p>还有就是人脸识别  百度人工智能云的sdk<br>以及一个梯度上升算法，<br>支付的话用支付宝的沙箱，</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[业主]<br>fank<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1yu411v7oZ/">项目视频：基于Spring的小区物业管理系统</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#97;&#110;&#49;&#107;&#101;&#50;&#x6b;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#102;&#97;&#110;&#49;&#107;&#101;&#50;&#x6b;&#x65;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的旅游住宿小程序</title>
    <url>/2022/05/22/Java%E6%97%85%E6%B8%B8%E4%BD%8F%E5%AE%BF%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>基于SpringBoot的旅游住宿小程序.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>百度地图JS<br>微信小程序</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>实现权限的分布控制，如管理员和民宿管理员，二则所能够操作的权限有质的区别。</p>
<p>实现控制前端页面的导航展示(添加，修改，删除，查询)。</p>
<p>实现景点的发布(添加，修改，删除，查询)。</p>
<p>实现旅游攻略的发布(添加，修改，删除，查询)。</p>
<p>实现民宿预定(添加，修改，删除，查询)。</p>
<p>实现民宿房间管理(添加，修改，删除，查询)。</p>
<p>订单统计，订单评价</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<p>[民宿管理员]<br>xierdun<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1S94y1f7Dg/">项目视频：基于Spring的旅游住宿小程序</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#97;&#x6e;&#49;&#x6b;&#101;&#x32;&#107;&#101;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#102;&#97;&#x6e;&#49;&#x6b;&#101;&#x32;&#107;&#101;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的小程序商城</title>
    <url>/2022/05/22/Java%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%95%86%E5%9F%8E/</url>
    <content><![CDATA[<p>基于SpringBoot的小程序商城.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>报表：Spread.js</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>管理员数据统计，管理员设计师审核，商品管理，设计师管理，订单管理，订单评价，公告信息管理，论坛管理，论坛回复，用户与设计师消息通知，用户收货地址管理</p>
<p>用户申请设计师，用户订单添加购物车，订单付款评价，论坛消息回复，收货地址新增修改，修改商品信息</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户登陆注册</span></span><br><span class="line">String openid = JSON.parseObject(res).get(<span class="string">&quot;openid&quot;</span>).toString();</span><br><span class="line">System.out.println(<span class="string">&quot;openid&quot;</span> + openid);</span><br><span class="line">Integer count = userInfoService.count(Wrappers.&lt;UserInfo&gt;lambdaQuery().eq(UserInfo::getOpenId, openid));</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.ok(userInfoService.getOne(Wrappers.&lt;UserInfo&gt;lambdaQuery().eq(UserInfo::getOpenId, openid)));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    user.setOpenId(openid);</span><br><span class="line">    user.setCreateDate(DateUtil.formatDateTime(<span class="keyword">new</span> Date()));</span><br><span class="line">    user.setCode(<span class="string">&quot;U-&quot;</span>+<span class="keyword">new</span> Date().getTime());</span><br><span class="line">    user.setType(<span class="number">1</span>);</span><br><span class="line">    userInfoService.save(user);</span><br><span class="line">    <span class="keyword">return</span> R.ok(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找聊天信息</span></span><br><span class="line"><span class="keyword">if</span> (takeUser == userId) &#123;</span><br><span class="line">    messageInfoService.update(Wrappers.&lt;MessageInfo&gt;lambdaUpdate().set(MessageInfo::getTaskStatus, <span class="number">1</span>)</span><br><span class="line">            .eq(MessageInfo::getTakeUser, takeUser).eq(MessageInfo::getSendUser, sendUser));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    messageInfoService.update(Wrappers.&lt;MessageInfo&gt;lambdaUpdate().set(MessageInfo::getTaskStatus, <span class="number">1</span>)</span><br><span class="line">            .eq(MessageInfo::getTakeUser, sendUser).eq(MessageInfo::getSendUser, takeUser));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> R.ok(messageInfoService.getMessageDetail(takeUser, sendUser));</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 订单统计</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">DATE_FORMAT( spo.days, <span class="string">&#x27;%m-%d&#x27;</span> ) <span class="keyword">AS</span> days,</span><br><span class="line"><span class="built_in">COUNT</span>( oi.`code` ) <span class="keyword">AS</span> count,</span><br><span class="line">IFNULL( <span class="built_in">SUM</span>( oi.price ), <span class="number">0</span> ) <span class="keyword">AS</span> orderPrice</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">0</span> <span class="keyword">DAY</span> ) days <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">2</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">3</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">4</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">5</span> <span class="keyword">DAY</span> ) <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">DATE_SUB( curdate(), <span class="type">INTERVAL</span> <span class="operator">+</span> <span class="number">6</span> <span class="keyword">DAY</span> )) spo</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> order_info oi <span class="keyword">ON</span> (</span><br><span class="line">DATE_FORMAT( oi.create_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span> ) <span class="operator">=</span> DATE_FORMAT( spo.days, <span class="string">&#x27;%Y-%m-%d&#x27;</span> ))</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">days</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> days <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 根据商铺获取订单统计</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COUNT</span>( <span class="number">1</span> ) <span class="keyword">AS</span> orderNum,</span><br><span class="line">IFNULL( <span class="built_in">SUM</span>( oi.price ), <span class="number">0</span> ) <span class="keyword">AS</span> orderPrice,</span><br><span class="line">ui.avatar,</span><br><span class="line">ui.user_name,</span><br><span class="line">si.tag,</span><br><span class="line">si.introduction</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">order_info oi</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> commodity_info ci <span class="keyword">ON</span> ( ci.id <span class="operator">=</span> oi.commodity_id )</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shop_info si <span class="keyword">ON</span> ( si.id <span class="operator">=</span> ci.shop_id )</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> user_info ui <span class="keyword">ON</span> ( ui.id <span class="operator">=</span> si.user_id )</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">si.id</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 本月收益占比</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COUNT</span>( oi.commodity_id ) <span class="keyword">AS</span> orderNum,</span><br><span class="line">IFNULL( <span class="built_in">SUM</span>( oi.price ), <span class="number">0</span> ) <span class="keyword">AS</span> orderPrice,</span><br><span class="line">ci.`name`</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">order_info oi</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> commodity_info ci <span class="keyword">ON</span> ( ci.id <span class="operator">=</span> oi.commodity_id )</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> DATE_FORMAT( oi.create_date, <span class="string">&#x27;%Y-%m&#x27;</span> ) <span class="operator">=</span> DATE_FORMAT( NOW(), <span class="string">&#x27;%Y-%m&#x27;</span> )</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">oi.commodity_id</span><br></pre></td></tr></table></figure>

<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1dP4y1N7wp/">项目视频：基于Spring小程序商城</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#102;&#97;&#x6e;&#49;&#x6b;&#x65;&#50;&#107;&#x65;&#x40;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#102;&#97;&#x6e;&#49;&#x6b;&#x65;&#50;&#107;&#x65;&#x40;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>桶装水配送小程序和管理平台</title>
    <url>/2022/05/22/Java%E6%A1%B6%E8%A3%85%E6%B0%B4%E9%85%8D%E9%80%81%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>桶装水配送小程序和管理平台.</p>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>JAVA 环境 </p>
<p>Node.js环境 [<a href="https://nodejs.org/en/]">https://nodejs.org/en/]</a> 选择14.17</p>
<p>Yarn 打开cmd， 输入npm install -g yarn !!!必须安装完毕nodejs</p>
<p>Mysql 数据库 [<a href="https://blog.csdn.net/qq_40303031/article/details/88935262]">https://blog.csdn.net/qq_40303031/article/details/88935262]</a> 一定要把账户和密码记住</p>
<p>redis</p>
<p>Idea 编译器 [<a href="https://blog.csdn.net/weixin_44505194/article/details/104452880]">https://blog.csdn.net/weixin_44505194/article/details/104452880]</a></p>
<p>WebStorm OR VScode 编译器 [<a href="https://www.jianshu.com/p/d63b5bae9dff]">https://www.jianshu.com/p/d63b5bae9dff]</a></p>
<h2 id="采用技术及功能"><a href="#采用技术及功能" class="headerlink" title="采用技术及功能"></a>采用技术及功能</h2><p>后端：SpringBoot、MybatisPlus、MySQL、Redis、<br>前端：Vue、Apex、Antd、Axios<br>微信小程序</p>
<p>平台前端：vue(框架) + vuex(全局缓存) + rue-router(路由) + axios(请求插件) + apex(图表)  + antd-ui(ui组件)</p>
<p>平台后台：springboot(框架) + redis(缓存中间件) + shiro(权限中间件) + mybatisplus(orm) + restful风格接口 + mysql(数据库)</p>
<p>开发环境：windows10 or windows7 ， vscode or webstorm ， idea + lambok</p>
<p>管理员：账户登陆， 密码修改，订单收益，订单量统计，待发货商品统计，月统计订单量，月统计交易额，用户收货地址管理，公告信息管理，订单评价管理，用户订单管理，商品信息管理，消息回复，用户购物车，商铺管理，小程序用户管理</p>
<p>用户：小程序授权登陆，商铺搜索，商品查询，添加购物车，查看公告信息，商品下单，订单评价，收货地址管理</p>
<h2 id="前台启动方式"><a href="#前台启动方式" class="headerlink" title="前台启动方式"></a>前台启动方式</h2><p>安装所需文件 yarn install<br>运行 yarn run dev</p>
<h2 id="默认后台账户密码"><a href="#默认后台账户密码" class="headerlink" title="默认后台账户密码"></a>默认后台账户密码</h2><p>[管理员]<br>admin<br>1234qwer</p>
<h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p>暂无</p>
<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://www.bilibili.com/video/BV1k5411R7RF/">项目视频：桶装水配送小程序</a></p>
<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><p>Email: <a href="mailto:&#x66;&#97;&#110;&#49;&#x6b;&#101;&#50;&#107;&#x65;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#x66;&#97;&#110;&#49;&#x6b;&#101;&#50;&#107;&#x65;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<p>WeChat: <code>Storm_Berserker</code></p>
<h2 id="接JAVAWEB毕设，纯原创，价格公道，诚信第一"><a href="#接JAVAWEB毕设，纯原创，价格公道，诚信第一" class="headerlink" title="接JAVAWEB毕设，纯原创，价格公道，诚信第一"></a>接JAVAWEB毕设，纯原创，价格公道，诚信第一</h2><p>More info: <a href="https://berserker287.github.io/">悲伤的橘子树</a></p>
]]></content>
      <tags>
        <tag>毕设源码</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-微服务架构划分</title>
    <url>/2022/05/23/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<h2 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a>分布式基础概念</h2><p>集群是个物理形态，分布式是个工作方式。</p>
<p>远程调用：在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的相互调用，我们成为远程调用</p>
<p>springcloud中使用HTTP+JSON的方式完成远程调用</p>
<h3 id="服务注册-发现-amp-注册中心"><a href="#服务注册-发现-amp-注册中心" class="headerlink" title="服务注册/发现&amp;注册中心"></a>服务注册/发现&amp;注册中心</h3><p>A服务调用B服务，A服务并不知道B服务当前在哪几台服务器有，那些是正常的，那些服务已经下线。解决这个问题可以引入注册中心。</p>
<p>配置中心用来几种管理微服务的配置信息。</p>
<h3 id="服务熔断-amp-服务降级"><a href="#服务熔断-amp-服务降级" class="headerlink" title="服务熔断&amp;服务降级"></a>服务熔断&amp;服务降级</h3><p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。</p>
<p>rpc远程调用情景：</p>
<p>订单服务 –&gt; 商品服务 –&gt; 库存服务</p>
<p>库存服务出现故障导致响应慢，导致商品服务需要等待，可能等到10s后库存服务才能响应。库存服务的不可用导致商品服务阻塞，商品服务等的期间，订单服务也处于阻塞。一个服务不可用导致整个服务链都阻塞。如果是高并发，第一个请求调用后阻塞10s得不到结果，第二个请求直接阻塞10s。更多的请求进来导致请求积压，全部阻塞，最终服务器的资源耗尽。导致雪崩</p>
<p>解决方案：</p>
<ol>
<li>服务熔断</li>
</ol>
<p>指定超时时间，库存服务3s没有响应就超时，如果经常失败，比如10s内100个请求都失败了。开启断路保护机制，下一次请求进来不调用库存服务了，因为上一次100%错误都出现了，我们直接在此中断，商品服务直接返回，返回一些默认数据或者null，而不调用库存服务了，这样就不会导致请求积压。</p>
<p>设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据</p>
<ol start="2">
<li>服务降级</li>
</ol>
<p>在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者处理简单【抛异常、返回NULL、调用Mock数据、调用Fallback处理逻辑】</p>
<h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><p>客户端发送请求到服务器路途中，设置一个网关，请求都先到达网关，网关对请求进行统一认证（合法非法）和处理等操作。他是安检。</p>
<p>在微服务架构中，API gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富的功能，帮助我们解决很多API管理难题。</p>
<p><a href="https://img-blog.csdnimg.cn/img_convert/b3a972ccdb5aa17ffaa4a443542032f0.png"><img src="https://img-blog.csdnimg.cn/img_convert/b3a972ccdb5aa17ffaa4a443542032f0.png" alt="OIVagf.png"></a></p>
<p>前后分离开发，分为内网部署和外网部署，外网是面向公众访问的，部署前端项目，可以有手机APP，电脑网页；内网部署的是后端集群，前端在页面上操作发送请求到后端，在这途中会经过Nginx集群，Nginx把请求转交给API网关(springcloud gateway)（网关可以根据当前请求动态地路由到指定的服务，看当前请求是想调用商品服务还是购物车服务还是检索），从路由过来如果请求很多，可以负载均衡地调用商品服务器中一台（商品服务复制了多份），当商品服务器出现问题也可以在网关层面对服务进行熔断或降级（使用阿里的sentinel组件），网关还有其他的功能如认证授权、限流（只放行部分到服务器）等。</p>
<p>到达服务器后进行处理（springboot为微服务），服务与服务可能会相互调用（使用OpenFeign组件），有些请求可能经过登录才能进行（基于OAuth2.0的认证中心。安全和权限使用springSecurity控制）</p>
<p>服务可能保存了一些数据或者需要使用缓存，我们使用redis集群（分片+哨兵集群）。持久化使用mysql，读写分离和分库分表。</p>
<p>服务和服务之间会使用消息队列（RabbitMQ），来完成异步解耦，分布式事务的一致性。有些服务可能需要全文检索，检索商品信息，使用ElaticSearch。</p>
<p>服务可能需要存取数据，使用阿里云的对象存储服务OSS。</p>
<p>项目上线后为了快速定位问题，使用ELK对日志进行处理，使用LogStash收集业务里的各种日志，把日志存储到ES中，用Kibana可视化页面从ES中检索出相关信息，帮助我们快速定位问题所在。</p>
<p>在分布式系统中，由于我们每个服务都可能部署在很多台机器，服务和服务可能相互调用，就得知道彼此都在哪里，所以需要将所有服务都注册到注册中心。服务从注册中心发现其他服务所在位置（使用阿里Nacos作为注册中心）。</p>
<p>每个服务的配置众多，为了实现改一处配置相同配置就同步更改，就需要配置中心，也使用阿里的Nacos，服务从配置中心中动态取配置。</p>
<p>服务追踪，追踪服务调用链哪里出现问题，使用springcloud提供的Sleuth、Zipkin、Metrics，把每个服务的信息交给开源的Prometheus进行聚合分析，再由Grafana进行可视化展示，提供Prometheus提供的AlterManager实时得到服务的告警信息，以短信/邮件的方式告知服务开发人员。</p>
<p>还提供了持续集成和持续部署。项目发布起来后，因为微服务众多，每一个都打包部署到服务器太麻烦，有了持续集成后开发人员可以将修改后的代码提交到github，运维人员可以通过自动化工具Jenkins Pipeline将github中获取的代码打包成docker镜像，最终是由k8s集成docker服务，将服务以docker容器的方式运行。</p>
<h3 id="相关功能技术"><a href="#相关功能技术" class="headerlink" title="相关功能技术"></a>相关功能技术</h3><ul>
<li>商品服务：商品的增删改查、商品的上下架、商品详情</li>
<li>支付服务</li>
<li>优惠服务</li>
<li>用户服务：用户的个人中心、收货地址</li>
<li>仓储服务：商品的库存</li>
<li>秒杀服务：定时任务与redis</li>
<li>订单服务：订单增删改查、验价、幂等性token</li>
<li>检索服务：商品的检索ES</li>
<li>中央认证服务：登录、注册、单点登录、社交登录</li>
<li>购物车服务：redis</li>
<li>后台管理系统：添加优惠信息等</li>
</ul>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>关于最近的一些选择</title>
    <url>/2022/05/23/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h2 id="卷土重来"><a href="#卷土重来" class="headerlink" title="卷土重来"></a>卷土重来</h2><p>2021年十月，我向上家公司提交了离职申请，在11月份正式离职。在家的很长时间都是自己一个人，计划的被打乱，唯一一件正事“驾照到手”。在家呆了四个月…</p>
<p>从今年二月底来到北京后，好兄弟陆陆续续给我介绍了几个毕设的定制项目，总共加起来也有两千多块钱</p>
<p>准备加紧做项目平台，但最近很不顺利。</p>
<ol>
<li><p>从四月七号入职开始，这家公司的加班算是严重，每天晚上都得九点左右到家，下班后的个人自由时间被排的满满的</p>
</li>
<li><p>28号晚上下班回来，鸿博家园一期B区发现一例阳性，目前隔离到现在已经持续一个月</p>
</li>
<li><p>入职这家公司后，我开始觉得自己是不是不适合做程序员这一行业</p>
</li>
</ol>
<p>对于今年找到的这份工作，我觉得自己很幸运，本身对自己的期望并没有那么高</p>
<h2 id="之后打算"><a href="#之后打算" class="headerlink" title="之后打算"></a>之后打算</h2><p>项目平台搁置到八月，最近一段时间准备好好卷卷尚硅谷的课程</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>基于VisualBox的Linux环境搭建</title>
    <url>/2022/05/24/%E5%9F%BA%E4%BA%8EVisualBox%E7%9A%84Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p><code>VisualBox进行安装需要cpu开启虚拟化，在开机启动的时候设置主板，CPU configuration，然后点击Intel Vitualization Technology。重启电脑</code></p>
<h2 id="Linux镜像"><a href="#Linux镜像" class="headerlink" title="Linux镜像"></a>Linux镜像</h2><p>普通安装linux虚拟机太麻烦，可以利用vagrant可以帮助我们快速地创建一个虚拟机。装了vitualbox，vagrant可以帮助我们快速创建出一个虚拟机</p>
<p>去<a href="https://www.vagrantup.com/">https://www.vagrantup.com/</a> 下载vagrant安装，安装后重启系统。cmd中输入vagrant有版本代表成功了</p>
<p>输入<code>vagrant init centos/7</code>，即可初始化一个centos7系统。（注意这个命令在哪个目录下执行的，他的Vagrantfile就生成在哪里）</p>
<p>输入<code>vagrant up</code>启动虚拟机环境</p>
<p>启动后出现default folder:/cygdrive/c/User/… =&gt;/vagrant</p>
<p>vagrant ssh 就会连上虚拟机。可以使用exit退出</p>
<p>下次使用也可以直接vagrant up直接启动，但要确保当前目录在C:/用户/ 文件夹下，他下面有一个Vagrantfile，不过我们也可以配置环境变量。</p>
<p>启动后再次vagrant ssh连上即可</p>
<h2 id="虚拟机IP地址"><a href="#虚拟机IP地址" class="headerlink" title="虚拟机IP地址"></a>虚拟机IP地址</h2><p>使用的网络方式是网络地址转换NAT（端口转发），如果其他主机要访问虚拟机，必须由windows端口如3333断发给虚拟机端口如3306。这样每在linux里安一个软件都要进行端口映射，不方便，（也可以在virualBox里挨个设置）。我们想要给虚拟机一个固定的ip地址，windows和虚拟机可以互相ping通。</p>
<ol>
<li>在虚拟机中配置静态IP</li>
</ol>
<h2 id="添加账户密码"><a href="#添加账户密码" class="headerlink" title="添加账户密码"></a>添加账户密码</h2><p>默认只允许ssh登录方式，为了后来操作方便，文件上传等，我们可以配置允许账号密码登录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">修改</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">重启</span><br><span class="line">service sshd restart</span><br><span class="line">账号root</span><br><span class="line">密码vagrant</span><br></pre></td></tr></table></figure>

<h2 id="配置YUM源"><a href="#配置YUM源" class="headerlink" title="配置YUM源"></a>配置YUM源</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原yum源</span></span><br><span class="line"></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="comment"># 使用新yum源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7-Base-163.repo</span><br><span class="line"><span class="comment"># 生成缓存</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><code>https://docs.docker.com/engine/install/centos/</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载系统之前的docker </span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line">docker -v</span><br><span class="line">sudo docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><p>目前主流 Linux 发行版均已使用 systemd 进行服务管理，这里介绍如何在使用 systemd 的 Linux 发行版中配置镜像加速器。</p>
<p>请首先执行以下命令，查看是否在 docker.service 文件中配置过镜像地址</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl cat docker | grep <span class="string">&#x27;\-\-registry\-mirror&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果该命令有输出，那么请执行 $ systemctl cat docker 查看 ExecStart= 出现的位置，修改对应的文件内容去掉 –registry-mirror 参数及其值，并按接下来的步骤进行配置</p>
<p>如果以上命令没有任何输出，那么就可以在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://hub-mirror.c.163.com&quot;,</span><br><span class="line">    &quot;https://mirror.baidubce.com&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后重新启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>检查加速器是否生效</p>
<p>执行 $ docker info，如果从结果中看到了如下内容，说明配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://hub-mirror.c.163.com/</span><br></pre></td></tr></table></figure>

<h2 id="安装mysql-docker"><a href="#安装mysql-docker" class="headerlink" title="安装mysql-docker"></a>安装mysql-docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># --name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行</span></span><br><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入已启动的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql bin/bash</span><br><span class="line"><span class="comment"># 退出进入的容器</span></span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"></span><br><span class="line">因为有目录映射，所以我们可以直接在镜像外执行</span><br><span class="line">vi /mydata/mysql/conf/my.conf </span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure>

<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>如果直接挂载的话docker会以为挂载的是一个目录，所以我们先创建一个文件然后再挂载，在虚拟机中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在虚拟机中</span></span><br><span class="line">mkdir -p /mydata/redis/conf</span><br><span class="line">touch /mydata/redis/conf/redis.conf</span><br><span class="line"></span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接进去redis客户端。</span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure>

<p>默认是不持久化的。在配置文件中输入appendonly yes，就可以aof持久化了。修改完docker restart redis，docker -it redis redis-cli</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /mydata/redis/conf/redis.conf</span><br><span class="line"><span class="comment"># 插入下面内容</span></span><br><span class="line">appendonly yes</span><br><span class="line">保存</span><br><span class="line"></span><br><span class="line">docker restart redis</span><br></pre></td></tr></table></figure>

<p>设置redis容器在docker启动的时候启动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker update redis --restart=always</span><br></pre></td></tr></table></figure>

<h2 id="安装nginx-docker"><a href="#安装nginx-docker" class="headerlink" title="安装nginx docker"></a>安装nginx docker</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull nginx:1.10</span><br><span class="line"><span class="comment"># 随便启动一个nginx实例，只是为了复制出配置，放到docker里作为镜像的统一配置</span></span><br><span class="line">docker run -p 80:80 --name nginx -d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把nginx里的东西复制出来</span></span><br><span class="line"><span class="built_in">cd</span> /mydata/nginx</span><br><span class="line">docker container cp nginx:/etc/nginx .</span><br><span class="line">然后在外部 /mydata/nginx/nginx 有了一堆文件</span><br><span class="line">mv /mydata/nginx/nginx /mydata/nginx/conf</span><br><span class="line"><span class="comment"># 停掉nginx</span></span><br><span class="line">docker stop nginx</span><br><span class="line">docker rm nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的nginx，使用刚才复制出来的配置文件</span></span><br><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/<span class="built_in">log</span>/nginx \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意一下这个路径映射到了/usr/share/nginx/html，我们在nginx配置文件中是写/usr/share/nginx/html，不是写/mydata/nginx/html</span></span><br><span class="line"></span><br><span class="line">docker update nginx --restart=always</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mydata/nginx/html/</span><br><span class="line">vim index.html</span><br><span class="line">随便写写</span><br><span class="line">测试 http://192.168.56.10:80</span><br></pre></td></tr></table></figure>

<h2 id="如何通过其他工具链接ssh"><a href="#如何通过其他工具链接ssh" class="headerlink" title="如何通过其他工具链接ssh"></a>如何通过其他工具链接ssh</h2><p>修改/etc/ssh/sshd_config</p>
<p>修改 PasswordAuthentication yes</p>
<p>systemctl restart sshd.service 或 service sshd restart</p>
<p>连接192.168.56.10:22端口成功，用户名root，密码vagrant</p>
<p>也可以通过vagrant ssh-config查看ip和端口，此时是127.0.0.1:2222</p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>突然感觉压力好大</title>
    <url>/2022/05/26/%E7%AA%81%E7%84%B6%E6%84%9F%E8%A7%89%E5%8E%8B%E5%8A%9B%E5%A5%BD%E5%A4%A7/</url>
    <content><![CDATA[<p>最近一直在家办公，每天都要和同事互通电话，昨晚甚至做梦梦到同事给我发微信消息</p>
<p>压力当然不一定是成长的动力</p>
<p>至少尼采说过这么一句话</p>
<blockquote>
<p>杀不死我的，让我更加强大</p>
</blockquote>
<p>这句话说的很有道理，如果压力过大以至于让你无暇他顾，严重损害了你的身体健康，甚至由于过劳而死，那很显然这不是什么好事情</p>
<p>我感觉压力是否能变成动力，除了不能过于强，还有就是取决于这个人的心态，如果他把压力看作成挑战，那么就容易成为动力，如果他总是充满了埋怨，那么就只能是折磨</p>
<p>心里很乱，不过也没有抱怨任何人，只是一时的负面情绪作祟，我想应该有部分人有这样的经历，在某个时间因为不经意的一句话或者一件很小的事突然引爆内心的负面情绪</p>
<p>最快乐的时光是刚毕业那两年，穷但是快乐，但是回想这一段经历，其实每个阶段都有各自的开心和烦恼</p>
<p>我知道你最近很累，是那种看不见的，身体上和精神上的疲惫感，但是请你一定要坚持下去。就算无人问津也<br>好，技不如人也罢，千万别让烦恼和焦虑毁了你本就不多的热情和定力。别贪心，我们不可能什么都有，别担<br>心，我们也不可能什么都没有。</p>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>本年答辩通过率100%</title>
    <url>/2022/05/25/%E9%A1%B9%E7%9B%AE%E4%BA%A4%E6%98%93%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<img src="https://s1.ax1x.com/2022/05/26/XA5QsI.jpg" alt="XE8dIg.jpg" border="0" height="100"/>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p><a href="https://www.zhihu.com/question/31020988">计算机毕设答辩时都会问到哪些问题？</a></p>
</blockquote>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/145911029">计算机专业毕业答辩小tips</a></p>
</blockquote>
<h2 id="现场提问"><a href="#现场提问" class="headerlink" title="现场提问"></a>现场提问</h2><p>首先一定是问你毕业设计的课题或者系统相关的问题，所以只要毕设是你自己做的，一般不会有问题的。一定要做到对课题或者系统做到熟悉，了如指掌，当老师让你展示某个部分的内容时要能及时准确的展示，并作出相关的讲解，给大家分享一些可能会问的问题，大家可以结合自己的项目试着回答一下</p>
<p><code>一定要注意不会不要瞎回答，诚实点，偶尔一个问题不会不影响什么的</code></p>
<ol>
<li>你这个系统所用到的新技术，它的优缺点，特点是什么？</li>
<li>你的论文价值是什么？</li>
<li>你数据库整体的设计是怎么样的？</li>
<li>某个表，某个字段作用是什么？</li>
<li>你系统核心功能怎么实现？</li>
<li>你的文献综述是如何形成的？</li>
<li>你整个系统的优缺点是什么?</li>
<li>功能还有什么地方需要完善?</li>
<li>你系统的整体设计是怎么样？</li>
<li>你系统用了什么技术,这些技术应用的好处是什么？</li>
<li>你的毕业论文进行的研究方法是什么？</li>
<li>你为什么要选这个题目，你对这个题目怎么理解的？</li>
<li>数据库的一些基础知识，三大范式是什么？</li>
<li>时序图，ER图你是怎么画的，有什么要注意的？</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://imgtu.com/i/XA5MQA"><img src="https://s1.ax1x.com/2022/05/26/XA5MQA.jpg" alt="XA5MQA.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5uzd"><img src="https://s1.ax1x.com/2022/05/26/XA5uzd.jpg" alt="XA5uzd.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5nRH"><img src="https://s1.ax1x.com/2022/05/26/XA5nRH.jpg" alt="XA5nRH.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5mJe"><img src="https://s1.ax1x.com/2022/05/26/XA5mJe.jpg" alt="XA5mJe.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5eiD"><img src="https://s1.ax1x.com/2022/05/26/XA5eiD.jpg" alt="XA5eiD.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA58df"><img src="https://s1.ax1x.com/2022/05/26/XA58df.jpg" alt="XA58df.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5lLt"><img src="https://s1.ax1x.com/2022/05/26/XA5lLt.jpg" alt="XA5lLt.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5Go8"><img src="https://s1.ax1x.com/2022/05/26/XA5Go8.jpg" alt="XA5Go8.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA53eP"><img src="https://s1.ax1x.com/2022/05/26/XA53eP.jpg" alt="XA53eP.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5YFS"><img src="https://s1.ax1x.com/2022/05/26/XA5YFS.jpg" alt="XA5YFS.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5tJg"><img src="https://s1.ax1x.com/2022/05/26/XA5tJg.jpg" alt="XA5tJg.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5NWQ"><img src="https://s1.ax1x.com/2022/05/26/XA5NWQ.jpg" alt="XA5NWQ.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XA5Uzj"><img src="https://s1.ax1x.com/2022/05/26/XA5Uzj.jpg" alt="XA5Uzj.jpg"></a></td>
<td><a href="https://imgtu.com/i/XA5dQs"><img src="https://s1.ax1x.com/2022/05/26/XA5dQs.jpg" alt="XA5dQs.jpg"></a></td>
</tr>
<tr>
<td><a href="https://imgtu.com/i/XE8dIg"><img src="https://s1.ax1x.com/2022/05/26/XE8dIg.md.jpg" alt="XE8dIg.md.jpg"></a></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>日常记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Navicat使用SQL文件将MySQL8.0导入到MySQL5.7</title>
    <url>/2022/05/26/MYSQL8%E6%96%87%E4%BB%B6%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<p>utf8mb4替换为utf8</p>
<p>utf8mb4_0900_ai_ci替换为utf8_general_ci</p>
<p>utf8_croatian_ci替换为utf8_general_ci</p>
<p>utf8mb4_general_ci替换为utf8_general_ci</p>
]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Java两个List间并集与差集</title>
    <url>/2022/05/27/Java%E4%B8%A4%E4%B8%AAList%E9%97%B4%E5%8F%96%E5%B9%B6%E9%9B%86%E4%B8%8E%E5%B7%AE%E9%9B%86/</url>
    <content><![CDATA[<blockquote>
<p>今天下午在家办公遇到个问题，手动调用公式计算得分，需要对之前的得分进行修改操作，条件是根据多个字段，确实难搞哇，弄了一下午</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置综合得分返回数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scoreParam 综合得分信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evaluationType 评价类型（年度、季度）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> calculateScoreList 当前计算的得分数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 综合得分数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SupplierComscore&gt; <span class="title">comScoreUpsert</span><span class="params">(SupplierComscore scoreParam, String evaluationType, List&lt;SupplierComscore&gt; calculateScoreList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;SupplierComscore&gt; updateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 已入库的得分数据</span></span><br><span class="line">    List&lt;SupplierComscore&gt; scoreList = supplierComscoreService.selectComscoreList(scoreParam, evaluationType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改的数据</span></span><br><span class="line">    List&lt;SupplierComscore&gt; resultList = calculateScoreList.stream()</span><br><span class="line">            .filter(item -&gt; scoreList.stream().map(e -&gt; e.getSupplierCode() + <span class="string">&quot;|&quot;</span> + e.getProductType())</span><br><span class="line">                    .collect(Collectors.toList()).contains(item.getSupplierCode() + <span class="string">&quot;|&quot;</span> + item.getProductType()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取得分结果信息</span></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(resultList)) &#123;</span><br><span class="line">        resultList.forEach(item -&gt; &#123;</span><br><span class="line">            scoreList.stream().filter(e -&gt; e.getSupplierCode().equals(item.getSupplierCode()) &amp;&amp; e.getProductType().equals(item.getProductType()))</span><br><span class="line">                    .findFirst().ifPresent(s -&gt; &#123;</span><br><span class="line">                item.setId(s.getId());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断综合评分是否修改</span></span><br><span class="line">                <span class="keyword">if</span> (s.getBaseScore() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setBaseScore(item.getScore());</span><br><span class="line">                    item.setScore(s.getScore());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断指标得分是否修改</span></span><br><span class="line">                <span class="keyword">if</span> (StrUtil.isNotBlank(s.getBaseIndexData())) &#123;</span><br><span class="line">                    item.setBaseIndexData(item.getIndexData());</span><br><span class="line">                    item.setIndexData(s.getIndexData());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断供应商评级是否修改</span></span><br><span class="line">                <span class="keyword">if</span> (s.getBaseSupplierLevel() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    item.setBaseSupplierLevel(item.getSupplierLevel());</span><br><span class="line">                    item.setSecretLevel(s.getSecretLevel());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置原先数据状态</span></span><br><span class="line">                item.setStatus(s.getStatus());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        updateList = resultList.stream().filter(e -&gt;</span><br><span class="line">                StrUtil.toString(e.getStatus()).equals(SalmKpiConstants.ASSESS_STATUS_EVALUATE_RELEASED) || StrUtil.toString(e.getStatus()).equals(SalmKpiConstants.ASSESS_STATUS_EVALUATE_REJECTED))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增的数据</span></span><br><span class="line">    List&lt;SupplierComscore&gt; otherList = calculateScoreList.stream().filter(item -&gt; !resultList.contains(item)).collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> ListUtils.union(otherList, updateList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>APEX</title>
    <url>/2022/05/29/APEX5.28/</url>
    <content><![CDATA[<blockquote>
<p>2022.5.28</p>
</blockquote>
<p>今天是本年来北京第一次玩APEX，爽！</p>
<p><a href="https://imgtu.com/i/XKsbv9"><img src="https://s1.ax1x.com/2022/05/28/XKsbv9.md.png" alt="XKsbv9.md.png"></a></p>
<blockquote>
<p>2022.5.29</p>
</blockquote>
<p><a href="https://imgtu.com/i/XlZap4"><img src="https://s1.ax1x.com/2022/05/30/XlZap4.png" alt="XlZap4.png"></a></p>
<p><a href="https://imgtu.com/i/XlZNhF"><img src="https://s1.ax1x.com/2022/05/30/XlZNhF.png" alt="XlZNhF.png"></a></p>
<blockquote>
<p>2022.5.30</p>
</blockquote>
<p><a href="https://imgtu.com/i/X3kwo8"><img src="https://s1.ax1x.com/2022/05/30/X3kwo8.png" alt="X3kwo8.png"></a></p>
<p><a href="https://imgtu.com/i/X3kddf"><img src="https://s1.ax1x.com/2022/05/30/X3kddf.png" alt="X3kddf.png"></a></p>
]]></content>
      <tags>
        <tag>APEX</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范</title>
    <url>/2022/05/28/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>【基础】<br>1，变量/类/文件命名要规范（大小写，含义）<br>2，注释适度<br>3，代码整形<br>4，禁止相同处理重复copy</p>
<p>【提高】<br>1，考虑空指针场景<br>2，考虑数据类型精度<br>3，考虑事务的回滚（后端）<br>4，考虑异常时的处理机制</p>
<p>【性能】<br>1，减少无效循环次数<br>2，减少数据库访问次数（后端）</p>
<h2 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h2><table>
<thead>
<tr>
<th>前缀名</th>
<th>意义</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>create</td>
<td>创建</td>
<td>createOrder()</td>
</tr>
<tr>
<td>delete</td>
<td>删除</td>
<td>deleteOrder()</td>
</tr>
<tr>
<td>add</td>
<td>创建，暗示新创建的对象属于某个集合</td>
<td>addPaidOrder()</td>
</tr>
<tr>
<td>remove</td>
<td>删除</td>
<td>removeOrder()</td>
</tr>
<tr>
<td>init或则initialize</td>
<td>初始化，暗示会做些诸如获取资源等特殊动作</td>
<td>initializeObjectPool()</td>
</tr>
<tr>
<td>destroy</td>
<td>销毁，暗示会做些诸如释放资源的特殊动作</td>
<td>destroyObjectPool()</td>
</tr>
<tr>
<td>open</td>
<td>打开</td>
<td>openConnection()</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
<td>closeConnection()</td>
</tr>
<tr>
<td>read</td>
<td>读取</td>
<td>readUserName()</td>
</tr>
<tr>
<td>write</td>
<td>写入</td>
<td>writeUserName()</td>
</tr>
<tr>
<td>get</td>
<td>获得</td>
<td>getName()</td>
</tr>
<tr>
<td>set</td>
<td>设置</td>
<td>setName()</td>
</tr>
<tr>
<td>prepare</td>
<td>准备</td>
<td>prepareOrderList()</td>
</tr>
<tr>
<td>copy</td>
<td>复制</td>
<td>copyCustomerList()</td>
</tr>
<tr>
<td>modity</td>
<td>修改</td>
<td>modifyActualTotalAmount()</td>
</tr>
<tr>
<td>calculate</td>
<td>数值计算</td>
<td>calculateCommission()</td>
</tr>
<tr>
<td>do</td>
<td>执行某个过程或流程</td>
<td>doOrderCancelJob()</td>
</tr>
<tr>
<td>dispatch</td>
<td>判断程序流程转向</td>
<td>dispatchUserRequest()</td>
</tr>
<tr>
<td>start</td>
<td>开始</td>
<td>startOrderProcessing()</td>
</tr>
<tr>
<td>stop</td>
<td>结束</td>
<td>stopOrderProcessing()</td>
</tr>
<tr>
<td>send</td>
<td>发送某个消息或事件</td>
<td>sendOrderPaidMessage()</td>
</tr>
<tr>
<td>receive</td>
<td>接受消息或时间</td>
<td>receiveOrderPaidMessgae()</td>
</tr>
<tr>
<td>respond</td>
<td>响应用户动作</td>
<td>responseOrderListItemClicked()</td>
</tr>
<tr>
<td>find</td>
<td>查找对象</td>
<td>findNewSupplier()</td>
</tr>
<tr>
<td>update</td>
<td>更新对象</td>
<td>updateCommission()</td>
</tr>
</tbody></table>
<h2 id="减少代码嵌套层次"><a href="#减少代码嵌套层次" class="headerlink" title="减少代码嵌套层次"></a>减少代码嵌套层次</h2><p>代码嵌套层次达 3 层以上时，一般人理解起来都会困难</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">            doJobA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt; c) &#123;</span><br><span class="line">            doJobB()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &lt; c) &#123;</span><br><span class="line">                    doJobC();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>减少嵌套的方法</p>
<ol>
<li>合并条件</li>
<li>利用 return 以省略后面的 else</li>
<li>利用子方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b &amp;&amp; b &gt; c) &#123;</span><br><span class="line">        doJobA();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b &amp;&amp; c &gt; b) &#123;</span><br><span class="line">        doJobB();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt;= b &amp;&amp; c &lt; b &amp;&amp; a &lt; c) &#123;</span><br><span class="line">        doJobC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端分离微信扫码登陆token授权方案</title>
    <url>/2022/05/31/Vue%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86/</url>
    <content><![CDATA[<blockquote>
<p>前端Vue 后端SpringBoot</p>
</blockquote>
<p>页面加载时声明一个变量state=’时间戳+6位随机数’，其中有个state参数需要我们传递，这个参数你传什么，微信回调的时候就会给你返回什么。 我们用之前生成那个state，当用户点击微信登录的按钮，我们就通过以state值为key和后端进行websocket连接</p>
<h2 id="前端设置socket链接"><a href="#前端设置socket链接" class="headerlink" title="前端设置socket链接"></a>前端设置socket链接</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> wsname = <span class="string">&quot;ws://xxxxx:xxx/socketServer/&quot;</span> + <span class="built_in">this</span>.state;</span><br><span class="line"><span class="built_in">this</span>.ws = <span class="keyword">new</span> WebSocket(wsname);</span><br><span class="line"><span class="comment">//连接成功触发</span></span><br><span class="line"><span class="built_in">this</span>.ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这个是接收后台发送信息的方法</span></span><br><span class="line"><span class="built_in">this</span>.ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(evt.data);</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line"> <span class="comment">//在这里判断后台给的用户信息和token  并进行相应的操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/socketServer/&#123;userid&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Session session;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Session&gt; sessionPool = <span class="keyword">new</span> HashMap&lt;String,Session&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; sessionIds = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 用户连接时触发</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@OnOpen</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Session session,<span class="meta">@PathParam(value=&quot;userid&quot;)</span>String userid)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.session = session;</span><br><span class="line">		sessionPool.put(userid, session);</span><br><span class="line">		sessionIds.put(session.getId(), userid);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 收到信息时触发</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@OnMessage</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;当前发送人sessionid为&quot;</span>+session.getId()+<span class="string">&quot;发送内容为&quot;</span>+message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 连接关闭触发</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@OnClose</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">		sessionPool.remove(sessionIds.get(session.getId()));</span><br><span class="line">		sessionIds.remove(session.getId());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发生错误时触发</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *信息发送的方法</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message,String userId)</span></span>&#123;</span><br><span class="line">		Session s = sessionPool.get(userId);</span><br><span class="line">		<span class="keyword">if</span>(s!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				s.getBasicRemote().sendText(message);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提供给前端发送信息的api"><a href="#提供给前端发送信息的api" class="headerlink" title="提供给前端发送信息的api"></a>提供给前端发送信息的api</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/sendpost&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendPost</span><span class="params">(<span class="meta">@RequestBody</span> Params params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (params.getJson() == <span class="keyword">null</span> || params.getUserid() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SocketServer.sendMessage(params.getJson(),params.getUserid());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信回调代码"><a href="#微信回调代码" class="headerlink" title="微信回调代码"></a>微信回调代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/callback&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthCallback callback)</span> </span>&#123;</span><br><span class="line">    AuthUser authUser = <span class="keyword">null</span>;</span><br><span class="line">    AuthRequest authRequest = getAuthRequest();</span><br><span class="line">    AuthResponse response = authRequest.login(callback);</span><br><span class="line">    UserInfo user = <span class="keyword">new</span> UserInfo();</span><br><span class="line">    <span class="keyword">if</span>(response.getData() <span class="keyword">instanceof</span> AuthUser) &#123;</span><br><span class="line">        authUser =  (AuthUser)response.getData();</span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        WechatUserInfo wechatUser = <span class="keyword">new</span> WechatUserInfo();</span><br><span class="line">        wechatUser.setOpenId(authUser.getRawUserInfo().get(<span class="string">&quot;openid&quot;</span>).toString());</span><br><span class="line">        wechatUser.setNickName(authUser.getRawUserInfo().get(<span class="string">&quot;nickname&quot;</span>).toString());</span><br><span class="line">        <span class="keyword">if</span> (authUser.getRawUserInfo().get(<span class="string">&quot;sex&quot;</span>) == <span class="keyword">null</span> || authUser.getRawUserInfo().get(<span class="string">&quot;sex&quot;</span>).toString().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            wechatUser.setSex(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wechatUser.setSex(Integer.parseInt(authUser.getRawUserInfo().get(<span class="string">&quot;sex&quot;</span>).toString()));</span><br><span class="line">        &#125;</span><br><span class="line">        wechatUser.setHeadImgUrl(authUser.getRawUserInfo().get(<span class="string">&quot;headimgurl&quot;</span>).toString());</span><br><span class="line">        user = userInfoService.wxCallBack(wechatUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加访问记录</span></span><br><span class="line">    HttpServletRequest request = HttpContextUtil.getHttpServletRequest();</span><br><span class="line">    String ip = IPUtil.getIpAddr(request);</span><br><span class="line">    accessInfoService.save(<span class="keyword">new</span> AccessInfo(ip, AddressUtil.getCityInfo(ip), DateUtil.formatDateTime(<span class="keyword">new</span> Date())));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//这里是将结果通过websocket返回给前端</span></span><br><span class="line">        System.out.println(HttpUtil.doPost(“http:<span class="comment">//www.niezhiliang.com:8086/websocket/sendpost”,user));</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>知识记录</title>
    <url>/2022/06/01/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    <content><![CDATA[<h2 id="使用Stream流获取唯一一个或首个的操作"><a href="#使用Stream流获取唯一一个或首个的操作" class="headerlink" title="使用Stream流获取唯一一个或首个的操作"></a>使用Stream流获取唯一一个或首个的操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(supplierList)) &#123;</span><br><span class="line">    supplierList.stream().filter(s -&gt; s.getSupplierCode().equals(resultData.getSupplierCode())).findFirst().ifPresent(s -&gt; resultData.setSupplierName(s.getSupplierName()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Apple&gt;&gt; groupBy = appleList.stream().collect(Collectors.groupingBy(Apple::getId));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>List转Map</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Apple&gt; appleMap = appleList.stream().collect(Collectors.toMap(Apple::getId, a -&gt; a,(k1,k2)-&gt;k1));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>total</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigDecimal totalMoney = appleList.stream().map(Apple::getMoney).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br></pre></td></tr></table></figure>

<h2 id="groupBy-实现的-list-转-map"><a href="#groupBy-实现的-list-转-map" class="headerlink" title="groupBy 实现的 list 转 map"></a>groupBy 实现的 list 转 map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; <span class="function">Map&lt;K, T&gt; <span class="title">list2Map</span><span class="params">(<span class="meta">@NonNull</span> Collection&lt;T&gt; list, <span class="meta">@NonNull</span> Function&lt;? <span class="keyword">super</span> T, K&gt; keyFunc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().collect(Collectors.toMap(keyFunc, Function.identity(),</span><br><span class="line">                (u, v) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(String.format(<span class="string">&quot;Multiple entries with same key,%s=%s,%s=%s&quot;</span>,</span><br><span class="line">                            keyFunc.apply(u), u,</span><br><span class="line">                            keyFunc.apply(v), v));</span><br><span class="line">                &#125;,</span><br><span class="line">                HashMap::<span class="keyword">new</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
</search>
